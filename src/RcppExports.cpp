// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// clean_syntax
std::vector<std::string> clean_syntax(const std::string& syntax);
RcppExport SEXP _mxsem_clean_syntax(SEXP syntaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type syntax(syntaxSEXP);
    rcpp_result_gen = Rcpp::wrap(clean_syntax(syntax));
    return rcpp_result_gen;
END_RCPP
}
// find_model_name
Rcpp::List find_model_name(const std::string& syntax);
RcppExport SEXP _mxsem_find_model_name(SEXP syntaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type syntax(syntaxSEXP);
    rcpp_result_gen = Rcpp::wrap(find_model_name(syntax));
    return rcpp_result_gen;
END_RCPP
}
// parameter_table_rcpp
Rcpp::List parameter_table_rcpp(const std::string& syntax, bool add_intercept, bool add_variance, bool add_exogenous_latent_covariances, bool add_exogenous_manifest_covariances, bool scale_latent_variance, bool scale_loading);
RcppExport SEXP _mxsem_parameter_table_rcpp(SEXP syntaxSEXP, SEXP add_interceptSEXP, SEXP add_varianceSEXP, SEXP add_exogenous_latent_covariancesSEXP, SEXP add_exogenous_manifest_covariancesSEXP, SEXP scale_latent_varianceSEXP, SEXP scale_loadingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type syntax(syntaxSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type add_variance(add_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type add_exogenous_latent_covariances(add_exogenous_latent_covariancesSEXP);
    Rcpp::traits::input_parameter< bool >::type add_exogenous_manifest_covariances(add_exogenous_manifest_covariancesSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_latent_variance(scale_latent_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_loading(scale_loadingSEXP);
    rcpp_result_gen = Rcpp::wrap(parameter_table_rcpp(syntax, add_intercept, add_variance, add_exogenous_latent_covariances, add_exogenous_manifest_covariances, scale_latent_variance, scale_loading));
    return rcpp_result_gen;
END_RCPP
}
// split_string_all
std::vector<std::string> split_string_all(const std::string& str, const char at);
RcppExport SEXP _mxsem_split_string_all(SEXP strSEXP, SEXP atSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    Rcpp::traits::input_parameter< const char >::type at(atSEXP);
    rcpp_result_gen = Rcpp::wrap(split_string_all(str, at));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mxsem_clean_syntax", (DL_FUNC) &_mxsem_clean_syntax, 1},
    {"_mxsem_find_model_name", (DL_FUNC) &_mxsem_find_model_name, 1},
    {"_mxsem_parameter_table_rcpp", (DL_FUNC) &_mxsem_parameter_table_rcpp, 7},
    {"_mxsem_split_string_all", (DL_FUNC) &_mxsem_split_string_all, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mxsem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
