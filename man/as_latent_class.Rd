% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_latent_class.R
\name{as_latent_class}
\alias{as_latent_class}
\title{as_latent_class}
\usage{
as_latent_class(
  mxModel,
  n_classes,
  parameters = c(".*"),
  use_grepl = TRUE,
  scale = "sum"
)
}
\arguments{
\item{mxModel}{mxModel}

\item{n_classes}{number of latent classes}

\item{parameters}{the parameters that should be class specific. By default
all parameters are class specific.}

\item{use_grepl}{if set to TRUE, grepl is used to check which parameters are
class specific. For instance, if parameters = "a" and use_grepl = TRUE, all parameters
whose label contains the letter "a" will be class specific. If use_grep = FALSE
only the parameter that has the label "a" is class specific.}

\item{scale}{which scale should be used to make sure that the sum of class probabilities
do not exceed 1? Available are "sum" and "softmax". See ?OpenMx::mxExpectationMixture
for more details.}
}
\value{
mxModel with multiple classes.
}
\description{
creates a latent class model from an OpenMx model. The OpenMx model
can be created with mxsem
}
\examples{
# The following example is adapted from the script provided by Joshua Pritikin at
# https://github.com/OpenMx/OpenMx/blob/master/demo/GrowthMixtureModel_PathRaw.R

# Step 1: Define a single group model:
model <- "
Intercept =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
Slope     =~ 0*x1 + 1*x2 + 2*x3 + 3*x4 + 4*x5
x1 ~ 0*1; x2 ~ 0*1; x3 ~ 0*1; x4 ~ 0*1; x5 ~ 0*1
x1 ~~ r*x1; x2 ~~ r*x2; x3 ~~ r*x3; x4 ~~ r*x4;x5 ~~ r*x5

Intercept ~  int*1
Slope     ~  slp*1
Intercept ~~ v_int*Intercept + cov*Slope
Slope     ~~ v_slp*Slope
"


mixture_model <- mxsem(model = model,
                       data = OpenMx::myGrowthMixtureData,
                       scale_loadings = FALSE) |>
  as_latent_class(n_classes = 2,
                  # we want the int, slp, v_int, cov, and v_slp parameters
                  # to be class-specific
                  parameters = c("int", "slp", "v_int", "cov", "v_slp"),
                  use_grepl = FALSE) |>
  mxRun()

summary(mixture_model)

# Mixture proportions:
mod$expectation$output$weights
}
