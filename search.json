[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Latent-Growth-Curve.html","id":"person-specific-occasions","dir":"Articles","previous_headings":"","what":"Person-Specific Occasions","title":"Latent-Growth-Curve","text":"Note: models can also specified metaSEM (Cheung, 2015) model outlined assumed individuals observed time points (\\(0\\), \\(1\\), \\(5\\), \\(7\\), \\(11\\)). many studies, however, case. instance, measurements may random occasions provide insights everyday life. reports may provided participants self-selected occasions. following example data set: columns t_1-t_5 indicate person-specific time points observations. latent growth curve model implies loading latent slope variable S observations y1-y4 must person-specific. expressed following equation, time \\(t_{ui}\\) person-specific: \\[y_{it_{ui}} = I_i + S_i\\times t_{ui}+\\varepsilon_{it_{ui}}\\] end, -called definition variables used (see Mehta & West, 2000; Sterba, 2014). mxsem, can achieved follows: Note loadings latent slope S items now specified data.t_1-data.t_5. tell OpenMx (Boker et al., 2011) parameters replaced person-specific variables t_1-t_5 found data set lgc_dat. Everything else stayed . Important: prefix data. indidepent name data set R. , even data set called lgc_dat, use data.t_1 refer t_1 variable located lgc_dat. model can set fitted mxsem:","code":"library(mxsem) lgc_dat <- simulate_latent_growth_curve(N = 100) head(lgc_dat) #>              y1         y2         y3         y4        y5 t_1       t_2 #> [1,] -0.2014280 -1.3037213 -1.8961838 -2.9602324 -3.299839   0 1.6942796 #> [2,]  0.2409314 -0.6886326 -0.6764733 -0.6766266 -2.232896   0 1.2068552 #> [3,]  1.2855548  1.8786683  2.5187949  2.4337790  3.378605   0 1.7533227 #> [4,]  2.6009112  2.6487864  3.9121769  3.7639211  4.160798   0 0.4281481 #> [5,]  2.1826775 -0.8370066 -2.6128334 -3.7611694 -8.002010   0 1.3503621 #> [6,]  0.6352425  1.7210440  2.5697578  3.5033485  4.016309   0 0.7148420 #>           t_3      t_4      t_5 #> [1,] 3.212704 4.852857 5.183994 #> [2,] 1.682294 2.141104 3.528977 #> [3,] 2.366735 4.018842 5.778890 #> [4,] 2.375866 4.237383 6.013243 #> [5,] 2.229126 2.628391 4.597698 #> [6,] 1.545012 2.221132 2.573061 model <- \"   # specify latent intercept      I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5   # specify latent slope      S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5        # specify means of latent intercept and slope      I ~ int*1      S ~ slp*1      # set intercepts of manifest variables to zero      y1 ~ 0*1; y2 ~ 0*1; y3 ~ 0*1; y4 ~ 0*1; y5 ~ 0*1;   \" # set up model lgc_mod <- mxsem(model = model,                   data = lgc_dat,                   # we set scale_loadings to FALSE because the                   # loadings were already fixed to specific values.                  # This just avoids a warning from mxsem                  scale_loadings = FALSE) # fit  lgc_fit <- mxRun(model = lgc_mod) #> Running untitled1 with 10 parameters  summary(lgc_fit) #> Summary of untitled1  #>   #> free parameters: #>     name matrix row col   Estimate   Std.Error A lbound ubound #> 1  y1↔y1      S  y1  y1 0.04287323 0.015114704 !     0!        #> 2  y2↔y2      S  y2  y2 0.03124036 0.007923625       0!        #> 3  y3↔y3      S  y3  y3 0.03322165 0.006183064       0!        #> 4  y4↔y4      S  y4  y4 0.04113935 0.008824519 !     0!        #> 5  y5↔y5      S  y5  y5 0.03325120 0.013614738 !     0!        #> 6    I↔I      S   I   I 1.02631223 0.148545112 !  1e-06        #> 7    I↔S      S   I   S 0.17664698 0.108358127 !               #> 8    S↔S      S   S   S 1.08750504 0.154341036 !  1e-06        #> 9    int      M   1   I 0.98263156 0.102426461                 #> 10   slp      M   1   S 0.52461301 0.104441644                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             10                     10              846.5694 #>    Saturated:             20                      0                    NA #> Independence:             10                     10                    NA #> Number of observations/statistics: 100/20 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       826.5694               866.5694                 869.0413 #> BIC:       800.5177               892.6211                 861.0386 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2024-03-09 11:01:38  #> Wall clock time: 0.4428859 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.11  #> Need help?  See help(mxSummary)"},{"path":[]},{"path":"/articles/Moderated-Nonlinear-Factor-Analysis.html","id":"model-specification","dir":"Articles","previous_headings":"","what":"Model specification","title":"Moderated-Nonlinear-Factor-Analysis","text":"want specify configural model outlined Kolbe et al. (2022). model, loadings, intercepts, variances co-variances predicted covariates Age Male. parameter constant across subjects latent variances Si Na, fixed 1 scaling. demonstrative purposes, first set confirmatory factor analysis without Age Male covariates. Using mxsem, syntax look follows: want predict every parameter model using Age Male. lSi_1 = lSi0_1 + lSi1_1*Age  + lSi2_1*Male lSi_3 = lSi0_3 + lSi1_3*Age  + lSi2_3*Male … iNa_4 = iNa0_4 + iNa1_4*Age  + iNa2_4*Male … mxsem, can implemented follows: Note parameter redefined exactly outlined . However, important details: variance parameters (e.g., vNa_2), transformed exp-function. exponential function ensures variances always positive. transformations must embraced curly braces. ensures mxsem sees algebras knows specify OpenMx. covariates Age Male must specified data.-prefix let OpenMx know values can found data set. Finally, pass syntax mxsem()-function create OpenMx model:","code":"cfa_syntax <- \"  # loadings Si =~ lSi_1*Si1  +       lSi_3*Si3  +       lSi_6*Si6  +       lSi_8*Si8  +       lSi_10*Si10 +       lSi_11*Si11 +       lSi_14*Si14  Na =~ lNa_2*Na2  +       lNa_4*Na4  +       lNa_5*Na5  +       lNa_7*Na7  +       lNa_9*Na9 +       lNa_12*Na12 +       lNa_13*Na13  # latent variances and covariances Si ~~ 1*Si Na ~~ 1*Na + cov*Si  # manifest variances Si1  ~~ vSi_1*Si1 Si3  ~~ vSi_3*Si3 Si6  ~~ vSi_6*Si6 Si8  ~~ vSi_8*Si8 Si10 ~~ vSi_10*Si10 Si11 ~~ vSi_11*Si11 Si14 ~~ vSi_14*Si14  Na2  ~~ vNa_2*Na2 Na4  ~~ vNa_4*Na4 Na5  ~~ vNa_5*Na5 Na7  ~~ vNa_7*Na7 Na9  ~~ vNa_9*Na9 Na12 ~~ vNa_12*Na12 Na13 ~~ vNa_13*Na13  # intercepts Si1  ~ iSi_1*1 Si3  ~ iSi_3*1 Si6  ~ iSi_6*1 Si8  ~ iSi_8*1 Si10 ~ iSi_10*1 Si11 ~ iSi_11*1 Si14 ~ iSi_14*1  Na2  ~ iNa_2*1 Na4  ~ iNa_4*1 Na5  ~ iNa_5*1 Na7  ~ iNa_7*1 Na9  ~ iNa_9*1 Na12 ~ iNa_12*1 Na13 ~ iNa_13*1 \" mnlfa_syntax <- \" ==== MNLFA ====  SI =~ {lSi_1  := lSi0_1  + lSi1_1*data.Age  + lSi2_1*data.Male }*Si1  +       {lSi_3  := lSi0_3  + lSi1_3*data.Age  + lSi2_3*data.Male }*Si3  +       {lSi_6  := lSi0_6  + lSi1_6*data.Age  + lSi2_6*data.Male }*Si6  +       {lSi_8  := lSi0_8  + lSi1_8*data.Age  + lSi2_8*data.Male }*Si8  +       {lSi_10 := lSi0_10 + lSi1_10*data.Age + lSi2_10*data.Male}*Si10 +       {lSi_11 := lSi0_11 + lSi1_11*data.Age + lSi2_11*data.Male}*Si11 +       {lSi_14 := lSi0_14 + lSi1_14*data.Age + lSi2_14*data.Male}*Si14  NA =~ {lNa_2  := lNa0_2  + lNa1_2*data.Age  + lNa2_2*data.Male }*Na2  +       {lNa_4  := lNa0_4  + lNa1_4*data.Age  + lNa2_4*data.Male }*Na4  +       {lNa_5  := lNa0_5  + lNa1_5*data.Age  + lNa2_5*data.Male }*Na5  +       {lNa_7  := lNa0_7  + lNa1_7*data.Age  + lNa2_7*data.Male }*Na7  +       {lNa_9  := lNa0_9  + lNa1_9*data.Age  + lNa2_9*data.Male }*Na9  +       {lNa_12 := lNa0_12 + lNa1_12*data.Age + lNa2_12*data.Male}*Na12 +       {lNa_13 := lNa0_13 + lNa1_13*data.Age + lNa2_13*data.Male}*Na13  SI ~~ 1*SI NA ~~ 1*NA + {cov := cov0  + cov1*data.Age  + cov2*data.Male }*SI  Si1  ~~ {vSi_1  := exp(vSi0_1  + vSi1_1*data.Age  + vSi2_1*data.Male )}*Si1 Si3  ~~ {vSi_3  := exp(vSi0_3  + vSi1_3*data.Age  + vSi2_3*data.Male )}*Si3 Si6  ~~ {vSi_6  := exp(vSi0_6  + vSi1_6*data.Age  + vSi2_6*data.Male )}*Si6 Si8  ~~ {vSi_8  := exp(vSi0_8  + vSi1_8*data.Age  + vSi2_8*data.Male )}*Si8 Si10 ~~ {vSi_10 := exp(vSi0_10 + vSi1_10*data.Age + vSi2_10*data.Male)}*Si10 Si11 ~~ {vSi_11 := exp(vSi0_11 + vSi1_11*data.Age + vSi2_11*data.Male)}*Si11 Si14 ~~ {vSi_14 := exp(vSi0_14 + vSi1_14*data.Age + vSi2_14*data.Male)}*Si14  Na2  ~~ {vNa_2  := exp(vNa0_2  + vNa1_2*data.Age  + vNa2_2*data.Male )}*Na2 Na4  ~~ {vNa_4  := exp(vNa0_4  + vNa1_4*data.Age  + vNa2_4*data.Male )}*Na4 Na5  ~~ {vNa_5  := exp(vNa0_5  + vNa1_5*data.Age  + vNa2_5*data.Male )}*Na5 Na7  ~~ {vNa_7  := exp(vNa0_7  + vNa1_7*data.Age  + vNa2_7*data.Male )}*Na7 Na9  ~~ {vNa_9  := exp(vNa0_9  + vNa1_9*data.Age  + vNa2_9*data.Male )}*Na9 Na12 ~~ {vNa_12 := exp(vNa0_12 + vNa1_12*data.Age + vNa2_12*data.Male)}*Na12 Na13 ~~ {vNa_13 := exp(vNa0_13 + vNa1_13*data.Age + vNa2_13*data.Male)}*Na13  Si1  ~ {iSi_1  := iSi0_1  + iSi1_1*data.Age  + iSi2_1*data.Male }*1 Si3  ~ {iSi_3  := iSi0_3  + iSi1_3*data.Age  + iSi2_3*data.Male }*1 Si6  ~ {iSi_6  := iSi0_6  + iSi1_6*data.Age  + iSi2_6*data.Male }*1 Si8  ~ {iSi_8  := iSi0_8  + iSi1_8*data.Age  + iSi2_8*data.Male }*1 Si10 ~ {iSi_10 := iSi0_10 + iSi1_10*data.Age + iSi2_10*data.Male}*1 Si11 ~ {iSi_11 := iSi0_11 + iSi1_11*data.Age + iSi2_11*data.Male}*1 Si14 ~ {iSi_14 := iSi0_14 + iSi1_14*data.Age + iSi2_14*data.Male}*1  Na2  ~ {iNa_2  := iNa0_2  + iNa1_2*data.Age  + iNa2_2*data.Male }*1 Na4  ~ {iNa_4  := iNa0_4  + iNa1_4*data.Age  + iNa2_4*data.Male }*1 Na5  ~ {iNa_5  := iNa0_5  + iNa1_5*data.Age  + iNa2_5*data.Male }*1 Na7  ~ {iNa_7  := iNa0_7  + iNa1_7*data.Age  + iNa2_7*data.Male }*1 Na9  ~ {iNa_9  := iNa0_9  + iNa1_9*data.Age  + iNa2_9*data.Male }*1 Na12 ~ {iNa_12 := iNa0_12 + iNa1_12*data.Age + iNa2_12*data.Male}*1 Na13 ~ {iNa_13 := iNa0_13 + iNa1_13*data.Age + iNa2_13*data.Male}*1 \" library(mxsem) mnlfa_model <- mxsem(model = mnlfa_syntax,                      data = DS14,                      # we scaled the latent variables manually,                      # so we will set all automatic scalings to FALSE:                      scale_loadings = FALSE,                      scale_latent_variances = FALSE)"},{"path":"/articles/Moderated-Nonlinear-Factor-Analysis.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"Fitting the model","title":"Moderated-Nonlinear-Factor-Analysis","text":"model can now fitted using mxRun() mxTryHard(). Checking regression coefficients lSi1_1, lSi1_2, … tell us linear change across age individuals Male = 0 differ individuals Male = 1.","code":"mnlfa_model <- mxRun(mnlfa_model) summary(mnlfa_model) #> Summary of MNLFA  #>   #> free parameters: #>        name         matrix row col      Estimate  Std.Error A #> 1    lSi0_1 new_parameters   1   1  0.7335132285 0.13036446   #> 2    lSi1_1 new_parameters   1   2 -0.1154254853 0.05220418 ! #> 3    lSi2_1 new_parameters   1   3  0.1400286638 0.13867317   #> 4    lSi0_3 new_parameters   1   4  0.3015782364 0.16686695   #> 5    lSi1_3 new_parameters   1   5 -0.0879323846 0.05923775   #> 6    lSi2_3 new_parameters   1   6  0.4591409519 0.17588023   #> 7    lSi0_6 new_parameters   1   7  0.9194296656 0.15047895   #> 8    lSi1_6 new_parameters   1   8 -0.0706498226 0.04993080   #> 9    lSi2_6 new_parameters   1   9 -0.0979268589 0.15798719   #> 10   lSi0_8 new_parameters   1  10  1.0701237981 0.12879256   #> 11   lSi1_8 new_parameters   1  11  0.0561234419 0.04935080   #> 12   lSi2_8 new_parameters   1  12 -0.0853303787 0.13746820   #> 13  lSi0_10 new_parameters   1  13  1.1310725407 0.14808520   #> 14  lSi1_10 new_parameters   1  14 -0.0484480495 0.05807198   #> 15  lSi2_10 new_parameters   1  15 -0.1777563856 0.15790777   #> 16  lSi0_11 new_parameters   1  16  0.7556453575 0.13435997   #> 17  lSi1_11 new_parameters   1  17 -0.0525072481 0.05105016   #> 18  lSi2_11 new_parameters   1  18 -0.0430455669 0.14312365 ! #> 19  lSi0_14 new_parameters   1  19  0.6896194654 0.11920733   #> 20  lSi1_14 new_parameters   1  20  0.1111536869 0.04813861   #> 21  lSi2_14 new_parameters   1  21  0.1527644297 0.12807987   #> 22   lNa0_2 new_parameters   1  22  0.7798765618 0.15313437   #> 23   lNa1_2 new_parameters   1  23 -0.0757615397 0.05655768   #> 24   lNa2_2 new_parameters   1  24 -0.0933488920 0.16447593   #> 25   lNa0_4 new_parameters   1  25  1.0847614527 0.12745324   #> 26   lNa1_4 new_parameters   1  26 -0.0943803260 0.04225701   #> 27   lNa2_4 new_parameters   1  27 -0.2833533551 0.13474250   #> 28   lNa0_5 new_parameters   1  28  0.5882977857 0.13851408   #> 29   lNa1_5 new_parameters   1  29 -0.0689102934 0.05227645   #> 30   lNa2_5 new_parameters   1  30  0.1443499871 0.14910590   #> 31   lNa0_7 new_parameters   1  31  1.1002294201 0.12071582   #> 32   lNa1_7 new_parameters   1  32 -0.0872053175 0.04420731   #> 33   lNa2_7 new_parameters   1  33 -0.1714468740 0.12912296   #> 34   lNa0_9 new_parameters   1  34  0.7460504275 0.12914999   #> 35   lNa1_9 new_parameters   1  35 -0.0247286653 0.04319635   #> 36   lNa2_9 new_parameters   1  36 -0.0758240461 0.13709891   #> 37  lNa0_12 new_parameters   1  37  0.8353126574 0.14286249   #> 38  lNa1_12 new_parameters   1  38 -0.0472960438 0.05226653   #> 39  lNa2_12 new_parameters   1  39  0.0720072435 0.15275398   #> 40  lNa0_13 new_parameters   1  40  1.3331780130 0.12196524   #> 41  lNa1_13 new_parameters   1  41 -0.0808880593 0.03986223   #> 42  lNa2_13 new_parameters   1  42 -0.4766565187 0.12805726   #> 43     cov0 new_parameters   1  43  0.5021308893 0.10206993   #> 44     cov1 new_parameters   1  44  0.0184185166 0.04156218   #> 45     cov2 new_parameters   1  45 -0.0494766003 0.11070191   #> 46   vSi0_1 new_parameters   1  46 -0.3207921643 0.19538215   #> 47   vSi1_1 new_parameters   1  47 -0.0242559720 0.07039982   #> 48   vSi2_1 new_parameters   1  48 -0.1741242920 0.21023802   #> 49   vSi0_3 new_parameters   1  49  0.4646166776 0.17530913   #> 50   vSi1_3 new_parameters   1  50  0.0600874892 0.06277808   #> 51   vSi2_3 new_parameters   1  51 -0.4775700357 0.18934760   #> 52   vSi0_6 new_parameters   1  52 -0.0244158462 0.19962034   #> 53   vSi1_6 new_parameters   1  53  0.0410837307 0.07268958   #> 54   vSi2_6 new_parameters   1  54 -0.4232699325 0.21506649   #> 55   vSi0_8 new_parameters   1  55 -0.7723689362 0.26846706   #> 56   vSi1_8 new_parameters   1  56 -0.1785978996 0.09288277   #> 57   vSi2_8 new_parameters   1  57  0.0830338484 0.28177855   #> 58  vSi0_10 new_parameters   1  58 -0.3311375701 0.23042525   #> 59  vSi1_10 new_parameters   1  59  0.0456637834 0.06899665   #> 60  vSi2_10 new_parameters   1  60  0.1333979111 0.24236808   #> 61  vSi0_11 new_parameters   1  61 -0.1991709830 0.19121319   #> 62  vSi1_11 new_parameters   1  62  0.0764535801 0.07265645   #> 63  vSi2_11 new_parameters   1  63 -0.0606475886 0.20384394   #> 64  vSi0_14 new_parameters   1  64 -0.4409584883 0.19592645   #> 65  vSi1_14 new_parameters   1  65 -0.0797038044 0.07836237   #> 66  vSi2_14 new_parameters   1  66 -0.1140400329 0.21124719   #> 67   vNa0_2 new_parameters   1  67  0.0992622376 0.18020780   #> 68   vNa1_2 new_parameters   1  68  0.0624813539 0.06505906   #> 69   vNa2_2 new_parameters   1  69  0.0822169729 0.19333179   #> 70   vNa0_4 new_parameters   1  70 -0.7374873485 0.19593876   #> 71   vNa1_4 new_parameters   1  71  0.0972335660 0.08011935   #> 72   vNa2_4 new_parameters   1  72 -0.0004451616 0.21171310   #> 73   vNa0_5 new_parameters   1  73  0.0329558380 0.17546274   #> 74   vNa1_5 new_parameters   1  74  0.0691105830 0.06831329   #> 75   vNa2_5 new_parameters   1  75 -0.0541634906 0.18921801   #> 76   vNa0_7 new_parameters   1  76 -1.0160612020 0.20615488   #> 77   vNa1_7 new_parameters   1  77  0.0793410893 0.07897027   #> 78   vNa2_7 new_parameters   1  78  0.2789485451 0.22265312   #> 79   vNa0_9 new_parameters   1  79 -0.2587533751 0.17864763   #> 80   vNa1_9 new_parameters   1  80  0.1619891808 0.07165132   #> 81   vNa2_9 new_parameters   1  81 -0.2160735863 0.19295989   #> 82  vNa0_12 new_parameters   1  82 -0.0164029048 0.17707471   #> 83  vNa1_12 new_parameters   1  83 -0.0209998081 0.07048656   #> 84  vNa2_12 new_parameters   1  84 -0.1532819383 0.19219885   #> 85  vNa0_13 new_parameters   1  85 -2.0960703327 0.49256961   #> 86  vNa1_13 new_parameters   1  86 -0.1933346014 0.09005283   #> 87  vNa2_13 new_parameters   1  87  1.1069582997 0.50007589 ! #> 88   iSi0_1 new_parameters   1  88  0.9952882315 0.13517017   #> 89   iSi1_1 new_parameters   1  89 -0.1033698427 0.04993923   #> 90   iSi2_1 new_parameters   1  90  0.3313793120 0.14478629   #> 91   iSi0_3 new_parameters   1  91  1.7153301417 0.15870563   #> 92   iSi1_3 new_parameters   1  92 -0.0212118715 0.05379438   #> 93   iSi2_3 new_parameters   1  93  0.1107780597 0.16867852   #> 94   iSi0_6 new_parameters   1  94  1.3003161720 0.16220638   #> 95   iSi1_6 new_parameters   1  95 -0.0662085233 0.04956790   #> 96   iSi2_6 new_parameters   1  96 -0.0985231446 0.17012730   #> 97   iSi0_8 new_parameters   1  97  1.2459902415 0.15331873   #> 98   iSi1_8 new_parameters   1  98 -0.0384614558 0.05221197   #> 99   iSi2_8 new_parameters   1  99  0.0272620641 0.16298521   #> 100 iSi0_10 new_parameters   1 100  1.2622340849 0.16947135   #> 101 iSi1_10 new_parameters   1 101 -0.0522932430 0.05643099   #> 102 iSi2_10 new_parameters   1 102  0.2239994251 0.17950790   #> 103 iSi0_11 new_parameters   1 103  1.3729266983 0.14257305   #> 104 iSi1_11 new_parameters   1 104  0.0040182225 0.04934502   #> 105 iSi2_11 new_parameters   1 105  0.2206742442 0.15155431   #> 106 iSi0_14 new_parameters   1 106  1.2037219838 0.12892048   #> 107 iSi1_14 new_parameters   1 107  0.0151275076 0.04851432   #> 108 iSi2_14 new_parameters   1 108 -0.0330127596 0.13918144   #> 109  iNa0_2 new_parameters   1 109  2.3325064548 0.16080438   #> 110  iNa1_2 new_parameters   1 110 -0.0846593844 0.05640576   #> 111  iNa2_2 new_parameters   1 111 -0.5228701024 0.17149789   #> 112  iNa0_4 new_parameters   1 112  1.2264649015 0.15513963   #> 113  iNa1_4 new_parameters   1 113 -0.1588700299 0.04639211   #> 114  iNa2_4 new_parameters   1 114 -0.3757878212 0.16236576   #> 115  iNa0_5 new_parameters   1 115  1.7177420582 0.14264118   #> 116  iNa1_5 new_parameters   1 116 -0.1539340797 0.05333015   #> 117  iNa2_5 new_parameters   1 117 -0.0524636753 0.15335948   #> 118  iNa0_7 new_parameters   1 118  1.2867668181 0.15093762   #> 119  iNa1_7 new_parameters   1 119 -0.1371967450 0.04985857   #> 120  iNa2_7 new_parameters   1 120 -0.3688511974 0.15974203   #> 121  iNa0_9 new_parameters   1 121  1.1235341341 0.14012960   #> 122  iNa1_9 new_parameters   1 122 -0.0732935602 0.04480776   #> 123  iNa2_9 new_parameters   1 123 -0.2102908472 0.14793042   #> 124 iNa0_12 new_parameters   1 124  2.5622357778 0.15684338   #> 125 iNa1_12 new_parameters   1 125 -0.2614878036 0.05575830   #> 126 iNa2_12 new_parameters   1 126 -0.8435588028 0.16749295   #> 127 iNa0_13 new_parameters   1 127  1.3901921004 0.16512704   #> 128 iNa1_13 new_parameters   1 128 -0.1506084303 0.04602353   #> 129 iNa2_13 new_parameters   1 129 -0.5924378285 0.17155438   #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:            129                   7435              20762.43 #>    Saturated:            119                   7445                    NA #> Independence:             28                   7536                    NA #> Number of observations/statistics: 541/7564 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       5892.426               21020.43                 21102.03 #> BIC:     -26029.146               21574.28                 21164.78 #> CFI: NA  #> TLI: 1   (also known as NNFI)  #> RMSEA:  0  [95% CI (NA, NA)] #> Prob(RMSEA <= 0.05): NA #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-10-03 12:07:46  #> Wall clock time: 409.0314 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/articles/Moderated-Nonlinear-Factor-Analysis.html","id":"plotting-individual-parameters","dir":"Articles","previous_headings":"","what":"Plotting Individual Parameters","title":"Moderated-Nonlinear-Factor-Analysis","text":"MNLFA predicts individual parameter values (e.g., lSi_1) using definition variables. get better picture individual parameters, mxsem provides get_individual_algebra_results function. function compute algebra individual parameters. Depending sample size number algebras model, may take time. Therefore, extract individual parameter values lSi_1 example. function return list data frames requested algebras. , list one element: lSi_1. data frame fields person, definition variables used algebra (Age Male case) person specific parameter (algebra_result). can plot results follows:","code":"lSi_1 <- get_individual_algebra_results(mxModel = mnlfa_model,                                         algebra_names = \"lSi_1\",                                         progress_bar = FALSE) head(lSi_1$lSi_1) #>   person         Age Male algebra_result #> 1      1  0.03136864    1      0.8699212 #> 2      2 -0.44266587    1      0.9246368 #> 3      3 -0.82189349    1      0.9684093 #> 4      4 -0.63227968    1      0.9465231 #> 5      5  0.03136864    1      0.8699212 #> 6      6 -0.06343826    0      0.7408356 library(ggplot2) ggplot(data = lSi_1$lSi_1,        aes(x = Age,            y = algebra_result,            color = factor(Male))) +   ylab(\"Individual Parameter Value for lSi_1\") +   geom_point()"},{"path":[]},{"path":"/articles/Syntax.html","id":"loadings-regressions-and-intercepts","dir":"Articles","previous_headings":"","what":"Loadings, Regressions, and Intercepts","title":"Syntax","text":"following specifies loadings latent variable eta manifest variables y1-y4: Regressions specified ~: Add covariances ~~ Intercepts specified ~1 Note: lavaan’s sem-function, loading first item latent variable constrained one default. Estimating loading freely requires replacing xi  =~ x1 + x2 + x3 xi  =~ NA*x1 + x2 + x3. mxsem, different approach used. calling mxsem-function set argument scale_loadings FALSE freely estimate loadings.","code":"eta =~ y1 + y2 + y3 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2  eta ~ 1"},{"path":"/articles/Syntax.html","id":"parameter-labels-and-constraints","dir":"Articles","previous_headings":"","what":"Parameter labels and constraints","title":"Syntax","text":"Add labels parameters follows: Fix parameters using numeric values instead labels:","code":"xi  =~ l1*x1 + l2*x2 + l3*x3 eta =~ l4*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi"},{"path":"/articles/Syntax.html","id":"bounds","dir":"Articles","previous_headings":"","what":"Bounds","title":"Syntax","text":"Lower upper bounds allow constraints parameters. instance, lower bound can prevent negative variances. Upper bounds specified v < 10. Note parameter label must always come first. following allowed: 0 < v 10 > v.","code":"xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi # residual variance for x1 x1 ~~ v*x1 # bound: v > 0"},{"path":"/articles/Syntax.html","id":"non-linear-constraints","dir":"Articles","previous_headings":"","what":"(Non-)linear constraints","title":"Syntax","text":"Assume latent construct eta observed twice, eta1 first observation eta2 second. want define loadings eta2 observations l_1 + delta_l1. delta_l1 zero, measurement invariance. Alternatively, implicit transformations can used follows: inspired approach metaSEM (Cheung, 2015).","code":"eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ l4*y4 + l5*y5 + l6*y6 # define new delta-parameter !delta_1; !delta_2; !delta_3 # redefine l4-l6 l4 := l1 + delta_1 l5 := l2 + delta_2 l6 := l3 + delta_3 eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ {l1 + delta_1} * y4 + {l2 + delta_2} * y5 + {l3 + delta_3} * y6"},{"path":"/articles/Syntax.html","id":"definition-variables","dir":"Articles","previous_headings":"","what":"Definition variables","title":"Syntax","text":"Definition variables allow person-specific parameter constraints. Use data.-prefix specify definition variables.","code":"I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  I ~ int*1 S ~ slp*1"},{"path":"/articles/Syntax.html","id":"model-name","dir":"Articles","previous_headings":"","what":"Model name","title":"Syntax","text":"can specify model name using following syntax: Note mxsem ignore everything three () equal signs! , following result problems:","code":"# start with at least three equal signs: === model_name === I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  I ~ int*1 S ~ slp*1 # the following two lines will be ignored:  I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  # start with at least three equal signs: === model_name ===  I ~ int*1 S ~ slp*1"},{"path":"/articles/Syntax.html","id":"starting-values","dir":"Articles","previous_headings":"","what":"Starting Values","title":"Syntax","text":"mxsem differs lavaan specification starting values. Instead providing starting values model syntax, set_starting_values function used.","code":""},{"path":"/articles/Syntax.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Syntax","text":"Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jannik H. Orzek. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orzek J (2024). mxsem: Specify 'OpenMx' Models 'lavaan'-Style Syntax. R package version 0.0.9, https://jhorzek.github.io/mxsem/.","code":"@Manual{,   title = {mxsem: Specify 'OpenMx' Models with a 'lavaan'-Style Syntax},   author = {Jannik H. Orzek},   year = {2024},   note = {R package version 0.0.9},   url = {https://jhorzek.github.io/mxsem/}, }"},{"path":"/index.html","id":"mxsem","dir":"","previous_headings":"","what":"Specify OpenMx Models with a lavaan-Style Syntax","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"mxsem provides lavaan-like (Rosseel, 2012) syntax implement structural equation models (SEM) OpenMx (Boker et al., 2011). objective simplify fitting basic SEM OpenMx, also unlocking useful advanced features. instance, mxsem allows parameter transformations definition variables. However, mxsem intentionally incomplete order focus simplicity. main function (mxsem()) similar lavaan’s sem()-function tries set parts model automatically (e.g., adding variances automatically scaling latent variables automatically). Warning: syntax settings mxsem may differ lavaan cases. See vignette(\"Syntax\", package = \"mxsem\") details syntax default arguments.","code":""},{"path":"/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"mxsem first package providing lavaan-like syntax OpenMx. find similar functions following packages: metaSEM (Cheung, 2015) provides lavaan2RAM function can combined create.mxModel function. combination offers features mxsem. instance, constraints form < b supported. mxsem constraints require algebras (e.g., !diff; := b - exp(diff)). umx (Bates et al., 2019) provides umxRAM umxLav2RAM functions can parse single lavaan-style statements (e.g., eta =~ y1 + y2 + y3) entire lavaan models OpenMx models. tidySEM (van Lissa, 2023) provides as_ram function translate lavaan syntax OpenMx also implements unified syntax specify , lavaan OpenMx models. Additionally, works well tidyverse. ezMx (Bates, et al. 2014) simplifies fitting SEM OpenMx also provides translation lavaan models OpenMx lavaan..OpenMx function. mxsem implements syntax parser scratch, can extend lavaan syntax account specific OpenMx features. enables implicit transformations curly braces.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Cite OpenMx (Boker et al., 2011) modeling lavaan syntax (Rosseel, 2012). cite mxsem, check citation(\"mxsem\").","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"mxsem available CRAN: newest version package can installed GitHub using following commands R: mxsem uses Rcpp, need compiler C++ (e.g., installing Rtools Windows, Xcode Mac build-essential linux).","code":"install.packages(\"mxsem\") if(!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"jhorzek/mxsem\",                           ref = \"main\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"following example directly adapted lavaan:","code":"library(mxsem) model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  mxsem(model = model,       data  = OpenMx::Bollen) |>   mxTryHard() |>   summary() #> Summary of untitled2  #>   #> free parameters: #>           name matrix   row   col   Estimate  Std.Error A lbound ubound #> 1     ind60→x2      A    x2 ind60 2.17951969 0.13890273                 #> 2     ind60→x3      A    x3 ind60 1.81811337 0.15211751                 #> 3  ind60→dem60      A dem60 ind60 1.44904273 0.38544855                 #> 4  ind60→dem65      A dem65 ind60 0.60449854 0.24058577                 #> 5           a1      A    y2 dem60 1.29147133 0.19273354                 #> 6            b      A    y3 dem60 1.17388110 0.11991187                 #> 7           c1      A    y4 dem60 1.30214922 0.15716825                 #> 8  dem60→dem65      A dem65 dem60 0.89849281 0.09209863                 #> 9           a2      A    y6 dem65 1.13247238 0.15405101                 #> 10          c2      A    y8 dem65 1.20957807 0.14443543                 #> 11       y1↔y1      S    y1    y1 1.91458549 0.46801012    1e-06        #> 12       y2↔y2      S    y2    y2 7.40452888 1.34562916    1e-06        #> 13       y3↔y3      S    y3    y3 4.99236808 0.96375021    1e-06        #> 14       y2↔y4      S    y2    y4 1.32053478 0.69918534                 #> 15       y4↔y4      S    y4    y4 3.15117584 0.75521995    1e-06        #> 16       y2↔y6      S    y2    y6 2.17541773 0.72882998                 #> 17       y6↔y6      S    y6    y6 5.01524082 0.89773033    1e-06        #> 18       x1↔x1      S    x1    x1 0.08135247 0.01970040    1e-06        #> 19       x2↔x2      S    x2    x2 0.12052866 0.06990806    1e-06        #> 20       x3↔x3      S    x3    x3 0.46670049 0.08911867    1e-06        #> 21       y1↔y5      S    y1    y5 0.59097044 0.36679629                 #> 22       y5↔y5      S    y5    y5 2.30230244 0.48307628    1e-06        #> 23       y3↔y7      S    y3    y7 0.73134993 0.62154873                 #> 24       y7↔y7      S    y7    y7 3.52500940 0.73477059    1e-06        #> 25       y4↔y8      S    y4    y8 0.35317926 0.45974116                 #> 26       y6↔y8      S    y6    y8 1.41224936 0.57574745                 #> 27       y8↔y8      S    y8    y8 3.32140113 0.71106484    1e-06        #> 28 ind60↔ind60      S ind60 ind60 0.44863429 0.08674943    1e-06        #> 29 dem60↔dem60      S dem60 dem60 3.71721943 0.89611392    1e-06        #> 30 dem65↔dem65      S dem65 dem65 0.16448130 0.23830932    1e-06        #> 31      one→y1      M     1    y1 5.46466715 0.29605013                 #> 32      one→y2      M     1    y2 4.25644263 0.44981119                 #> 33      one→y3      M     1    y3 6.56311026 0.39007812                 #> 34      one→y4      M     1    y4 4.45253310 0.38385079                 #> 35      one→y6      M     1    y6 2.97807431 0.38583489                 #> 36      one→x1      M     1    x1 5.05438392 0.08406042                 #> 37      one→x2      M     1    x2 4.79219470 0.17326513                 #> 38      one→x3      M     1    x3 3.55768986 0.16122804                 #> 39      one→y5      M     1    y5 5.13625262 0.30762959                 #> 40      one→y7      M     1    y7 6.19626397 0.36757001                 #> 41      one→y8      M     1    y8 4.04339020 0.37125831                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             41                    784              3096.945 #>    Saturated:             77                    748                    NA #> Independence:             22                    803                    NA #> Number of observations/statistics: 75/825 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      1528.9445               3178.945                 3283.308 #> BIC:      -287.9662               3273.962                 3144.740 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:09  #> Wall clock time: 0.2771828 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"adding-bounds","dir":"","previous_headings":"","what":"Adding bounds","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Lower upper bounds can added parameters model. following demonstrates bounds loading: mxsem adds lower bounds variances default. remove lower bounds, set lbound_variances = FALSE calling mxsem().","code":"library(mxsem) model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8         # lower bound on a1      a1 > 0   # upper bound on a2      a2 < 10.123 '  mxsem(model = model,       data  = OpenMx::Bollen,        # use latent variances to scale the model       scale_loadings = FALSE,        scale_latent_variances = TRUE) |>   mxTryHard() |>   summary() #> Summary of untitled4  #>   #> free parameters: #>           name matrix   row   col    Estimate  Std.Error A lbound ubound #> 1     ind60→x1      A    x1 ind60  0.66666815 0.06314203                 #> 2     ind60→x2      A    x2 ind60  1.45423326 0.12394721                 #> 3     ind60→x3      A    x3 ind60  1.21231509 0.12551275                 #> 4     dem60→y1      A    y1 dem60 -2.24692386 0.16292809                 #> 5           a1      A    y2 dem60  0.00000000         NA !     0!        #> 6            b      A    y3 dem60 -2.55892738 0.17648475                 #> 7           c1      A    y4 dem60 -2.80348655 0.23710803                 #> 8     dem65→y5      A    y5 dem65 -2.10524882 0.19254708                 #> 9           a2      A    y6 dem65 -2.55243469 0.27839775          10.123 #> 10          c2      A    y8 dem65 -2.71463830 0.22625659                 #> 11       x1↔x1      S    x1    x1  0.08172352 0.01983068    1e-06        #> 12       x2↔x2      S    x2    x2  0.11872315 0.07051504    1e-06        #> 13       x3↔x3      S    x3    x3  0.46734771 0.08933374    1e-06        #> 14       y1↔y1      S    y1    y1  1.76022749 0.40668814    1e-06        #> 15       y2↔y2      S    y2    y2 15.37208533         NA    1e-06        #> 16       y3↔y3      S    y3    y3  4.97654067 0.92946421    1e-06        #> 17       y4↔y4      S    y4    y4  3.24412436 0.68674912    1e-06        #> 18       y5↔y5      S    y5    y5  2.28325758 0.45047306    1e-06        #> 19       y6↔y6      S    y6    y6  4.68028674 0.88272249    1e-06        #> 20       y7↔y7      S    y7    y7  3.46858346 0.67373234    1e-06        #> 21       y8↔y8      S    y8    y8  2.99198432 0.64558867    1e-06        #> 22 ind60↔dem60      S ind60 dem60 -0.45702984 0.10093202                 #> 23 ind60↔dem65      S ind60 dem65 -0.55364625 0.08756465                 #> 24 dem60↔dem65      S dem60 dem65  0.97486174 0.03020539                 #> 25      one→x1      M     1    x1  5.05438384 0.08376190                 #> 26      one→x2      M     1    x2  4.79219463 0.17257565                 #> 27      one→x3      M     1    x3  3.55768979 0.16071368                 #> 28      one→y1      M     1    y1  5.46466667 0.30132622                 #> 29      one→y2      M     1    y2  4.25644288 0.45272065                 #> 30      one→y3      M     1    y3  6.56311025 0.39201794                 #> 31      one→y4      M     1    y4  4.45253304 0.38479483                 #> 32      one→y5      M     1    y5  5.13625192 0.29924780                 #> 33      one→y6      M     1    y6  2.97807408 0.38637444                 #> 34      one→y7      M     1    y7  6.19626389 0.36547691                 #> 35      one→y8      M     1    y8  4.04338968 0.37171110                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             35                    790              3187.076 #>    Saturated:             77                    748                    NA #> Independence:             22                    803                    NA #> Number of observations/statistics: 75/825 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      1607.0759               3257.076                 3321.691 #> BIC:      -223.7397               3338.188                 3227.877 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:11  #> Wall clock time: 0.0535531 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"definition-variables","dir":"","previous_headings":"","what":"Definition Variables","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Definition variables , instance, used latent growth curve models time intervals observations different subjects data set. example, variables t_1-t_5 indicate person-specific times observation: OpenMx, parameters can set values found columns data set data. prefix. used following fix loadings latent slope variable observations times recorded t_1-t_5:","code":"library(mxsem) set.seed(3489) dataset <- simulate_latent_growth_curve(N = 100) head(dataset) #>             y1       y2       y3        y4         y5 t_1       t_2      t_3 #> [1,] 1.2817946 5.159870 7.178191  8.950046 11.4822306   0 1.5792322 2.304777 #> [2,] 1.1796379 3.588279 5.927219  8.381157 10.4640667   0 1.6701976 3.530621 #> [3,] 0.2196010 0.763441 2.499564  3.672995  4.4505868   0 0.6452145 2.512730 #> [4,] 0.5688185 1.440709 1.523483  1.416965  1.9674847   0 1.7171826 3.245522 #> [5,] 3.4928919 2.620657 1.753159  1.080701 -0.4436508   0 1.4055839 2.024568 #> [6,] 0.3520293 5.126854 7.390669 10.721785 12.6363472   0 1.5249299 2.400432 #>           t_4      t_5 #> [1,] 3.120797 4.217403 #> [2,] 5.004695 6.408367 #> [3,] 3.761189 4.729461 #> [4,] 4.331997 6.145424 #> [5,] 3.570780 5.517224 #> [6,] 3.654230 4.222212 library(mxsem) model <- \"   # specify latent intercept      I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5   # specify latent slope      S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5        # specify means of latent intercept and slope      I ~ int*1      S ~ slp*1      # set intercepts of manifest variables to zero      y1 ~ 0*1; y2 ~ 0*1; y3 ~ 0*1; y4 ~ 0*1; y5 ~ 0*1;   \"  mxsem(model = model,       data  = dataset) |>   mxTryHard() |>   summary() #> Summary of untitled6  #>   #> free parameters: #>     name matrix row col    Estimate   Std.Error A lbound ubound #> 1  y1↔y1      S  y1  y1  0.02578029 0.014488264       0!        #> 2  y2↔y2      S  y2  y2  0.04010524 0.008389750       0!        #> 3  y3↔y3      S  y3  y3  0.04008174 0.006984929       0!        #> 4  y4↔y4      S  y4  y4  0.01752572 0.006930941       0!        #> 5  y5↔y5      S  y5  y5  0.05936966 0.016067358    1e-06        #> 6    I↔I      S   I   I  1.02593601 0.148058876    1e-06        #> 7    I↔S      S   I   S -0.14724742 0.110045416                 #> 8    S↔S      S   S   S  1.13051032 0.160486387    1e-06        #> 9    int      M   1   I  0.93112322 0.102209199                 #> 10   slp      M   1   S  0.48442624 0.106475815                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             10                     10              841.2609 #>    Saturated:             20                      0                    NA #> Independence:             10                     10                    NA #> Number of observations/statistics: 100/20 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       821.2609               861.2609                 863.7328 #> BIC:       795.2092               887.3126                 855.7301 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:12  #> Wall clock time: 0.2313709 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"transformations","dir":"","previous_headings":"","what":"Transformations","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Sometimes, one may want express one parameter function parameters. moderated non-linear factor analysis, example, model parameters often expressed terms covariate k. instance, effect ξ η expressed  = a0 + a1 × k. mxsem currently supports two ways specifying transformations. First, can specified explicitly. end, parameters a0 a1 must fist initialized !a0 !a1. Additionally, transformation must defined := a0 + a1*data.k. Alternatively, transformations can defined implicitly placing algebra curly braces directly inserting syntax place parameter label. inspired approach metaSEM (Cheung, 2015). can also provide custom names algebra results:","code":"library(mxsem) set.seed(9820) dataset <- simulate_moderated_nonlinear_factor_analysis(N = 100) head(dataset) #>              x1         x2         x3          y1         y2            y3 k #> [1,] -1.2166034 -1.2374549 -1.3731943 -1.01018683 -0.8296293 -1.2300555484 0 #> [2,]  1.1911346  0.9971499  1.0226322  0.86048030  0.4509088  0.6052786392 1 #> [3,] -0.7777169 -0.4725291 -0.8507347 -1.09582848 -0.5035753 -0.8048378456 0 #> [4,]  1.0027847  1.2351709  0.6951317  0.94040287  0.6684979  0.6596891858 0 #> [5,]  0.4387896  0.3919877  0.3260557 -0.58188691 -0.3614349 -0.4901022121 0 #> [6,] -1.4951549 -0.8834637 -1.1715535  0.01173845 -0.4697865 -0.0006475256 0 model <- \"   # loadings      xi =~ x1 + x2 + x3      eta =~ y1 + y2 + y3   # regression      eta ~ a*xi      # we need two new parameters: a0 and a1. These are created as follows:      !a0      !a1   # Now, we redefine a to be a0 + k*a1, where k is found in the data      a := a0 + data.k*a1 \"  fit_mx <- mxsem(model = model,                 data  = dataset) |>   mxTryHard()  summary(fit_mx)  # get just the value for parameter a: mxEval(expression = a, model = fit_mx) #> Summary of untitled20  #>   #> free parameters: #>       name         matrix row col    Estimate   Std.Error A lbound ubound #> 1    xi→x2              A  x2  xi  0.79157858 0.026246184                 #> 2    xi→x3              A  x3  xi  0.89166108 0.027991673                 #> 3   eta→y2              A  y2 eta  0.81610411 0.028977474                 #> 4   eta→y3              A  y3 eta  0.90741889 0.027924346                 #> 5    x1↔x1              S  x1  x1  0.04060244 0.011022344 !     0!        #> 6    x2↔x2              S  x2  x2  0.04519865 0.008621643 !     0!        #> 7    x3↔x3              S  x3  x3  0.04647166 0.010143724       0!        #> 8    y1↔y1              S  y1  y1  0.03388962 0.008495346 !     0!        #> 9    y2↔y2              S  y2  y2  0.04210945 0.007766691 !     0!        #> 10   y3↔y3              S  y3  y3  0.03107010 0.007268278       0!        #> 11   xi↔xi              S  xi  xi  1.07304552 0.157796861    1e-06        #> 12 eta↔eta              S eta eta  0.26127631 0.041232786    1e-06        #> 13  one→x1              M   1  x1 -0.14881030 0.105057193                 #> 14  one→x2              M   1  x2 -0.10969677 0.084338898                 #> 15  one→x3              M   1  x3 -0.15448454 0.094426293                 #> 16  one→y1              M   1  y1 -0.05304659 0.089761149                 #> 17  one→y2              M   1  y2 -0.13040871 0.074578868                 #> 18  one→y3              M   1  y3 -0.05666275 0.081647174                 #> 19      a0 new_parameters   1   1  0.78168092 0.069381896                 #> 20      a1 new_parameters   1   2 -0.19334145 0.107742907                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             20                      7              475.3822 #>    Saturated:             27                      0                    NA #> Independence:             12                     15                    NA #> Number of observations/statistics: 100/27 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       461.3822               515.3822                 526.0151 #> BIC:       443.1460               567.4856                 504.3206 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:12  #> Wall clock time: 0.04142094 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary) #>           [,1] #> [1,] 0.7816809 model <- \"   # loadings      xi =~ x1 + x2 + x3      eta =~ y1 + y2 + y3   # regression      eta ~ {a0 + a1*data.k} * xi \"  mxsem(model = model,       data  = dataset) |>   mxTryHard() |>   summary() #> Summary of untitled48  #>   #> free parameters: #>       name         matrix row col    Estimate   Std.Error A lbound ubound #> 1    xi→x2              A  x2  xi  0.79157858 0.026246184                 #> 2    xi→x3              A  x3  xi  0.89166108 0.027991673                 #> 3   eta→y2              A  y2 eta  0.81610411 0.028977474                 #> 4   eta→y3              A  y3 eta  0.90741889 0.027924346                 #> 5    x1↔x1              S  x1  x1  0.04060244 0.011022344 !     0!        #> 6    x2↔x2              S  x2  x2  0.04519865 0.008621643 !     0!        #> 7    x3↔x3              S  x3  x3  0.04647166 0.010143724       0!        #> 8    y1↔y1              S  y1  y1  0.03388962 0.008495346 !     0!        #> 9    y2↔y2              S  y2  y2  0.04210945 0.007766691 !     0!        #> 10   y3↔y3              S  y3  y3  0.03107010 0.007268278       0!        #> 11   xi↔xi              S  xi  xi  1.07304552 0.157796861    1e-06        #> 12 eta↔eta              S eta eta  0.26127631 0.041232786    1e-06        #> 13  one→x1              M   1  x1 -0.14881030 0.105057193                 #> 14  one→x2              M   1  x2 -0.10969677 0.084338898                 #> 15  one→x3              M   1  x3 -0.15448454 0.094426293                 #> 16  one→y1              M   1  y1 -0.05304659 0.089761149                 #> 17  one→y2              M   1  y2 -0.13040871 0.074578868                 #> 18  one→y3              M   1  y3 -0.05666275 0.081647174                 #> 19      a0 new_parameters   1   1  0.78168092 0.069381896                 #> 20      a1 new_parameters   1   2 -0.19334145 0.107742907                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             20                      7              475.3822 #>    Saturated:             27                      0                    NA #> Independence:             12                     15                    NA #> Number of observations/statistics: 100/27 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       461.3822               515.3822                 526.0151 #> BIC:       443.1460               567.4856                 504.3206 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:13  #> Wall clock time: 0.0401659 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary) model <- \"   # loadings      xi  =~ x1 + x2 + x3      eta =~ y1 + y2 + y3   # regression      eta ~ {a := a0 + a1*data.k} * xi \"  fit_mx <- mxsem(model = model,                 data  = dataset) |>   mxTryHard()  summary(fit_mx)  # get just the value for parameter a: mxEval(expression = a,         model      = fit_mx) #> Summary of untitled76  #>   #> free parameters: #>       name         matrix row col    Estimate   Std.Error A lbound ubound #> 1    xi→x2              A  x2  xi  0.79157858 0.026246184                 #> 2    xi→x3              A  x3  xi  0.89166108 0.027991673                 #> 3   eta→y2              A  y2 eta  0.81610411 0.028977474                 #> 4   eta→y3              A  y3 eta  0.90741889 0.027924346                 #> 5    x1↔x1              S  x1  x1  0.04060244 0.011022344 !     0!        #> 6    x2↔x2              S  x2  x2  0.04519865 0.008621643 !     0!        #> 7    x3↔x3              S  x3  x3  0.04647166 0.010143724       0!        #> 8    y1↔y1              S  y1  y1  0.03388962 0.008495346 !     0!        #> 9    y2↔y2              S  y2  y2  0.04210945 0.007766691 !     0!        #> 10   y3↔y3              S  y3  y3  0.03107010 0.007268278       0!        #> 11   xi↔xi              S  xi  xi  1.07304552 0.157796861    1e-06        #> 12 eta↔eta              S eta eta  0.26127631 0.041232786    1e-06        #> 13  one→x1              M   1  x1 -0.14881030 0.105057193                 #> 14  one→x2              M   1  x2 -0.10969677 0.084338898                 #> 15  one→x3              M   1  x3 -0.15448454 0.094426293                 #> 16  one→y1              M   1  y1 -0.05304659 0.089761149                 #> 17  one→y2              M   1  y2 -0.13040871 0.074578868                 #> 18  one→y3              M   1  y3 -0.05666275 0.081647174                 #> 19      a0 new_parameters   1   1  0.78168092 0.069381896                 #> 20      a1 new_parameters   1   2 -0.19334145 0.107742907                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             20                      7              475.3822 #>    Saturated:             27                      0                    NA #> Independence:             12                     15                    NA #> Number of observations/statistics: 100/27 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       461.3822               515.3822                 526.0151 #> BIC:       443.1460               567.4856                 504.3206 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:13  #> Wall clock time: 0.03462195 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary) #>           [,1] #> [1,] 0.7816809"},{"path":"/index.html","id":"adapting-the-model","dir":"","previous_headings":"","what":"Adapting the Model","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"mxsem returns mxModel object can adapted users familiar OpenMx.","code":""},{"path":"/index.html","id":"trouble-shooting","dir":"","previous_headings":"","what":"Trouble shooting","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Sometimes things may go wrong. One way figure mxsem messed look parameter table generated internally. parameter table returned default. See vignette(\"create_parameter_table\", package = \"mxsem\") details. Another point failure default labels used mxsem indicate directed undirected effects. based unicode characters. see parameter labels similar \"eta\\u2192y1\" output, indicates editor display unicode characters. case, can customize labels follows:","code":"library(mxsem) model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8 '  mxsem(model      = model,       data       = OpenMx::Bollen,        directed   = \"_TO_\",        undirected = \"_WITH_\") |>   mxTryHard() |>   summary() #> Summary of untitled90  #>   #> free parameters: #>                name matrix   row   col   Estimate  Std.Error A lbound ubound #> 1       ind60_TO_x2      A    x2 ind60 2.18115661 0.13928298                 #> 2       ind60_TO_x3      A    x3 ind60 1.81852856 0.15228300                 #> 3                a1      A    y2 dem60 1.40364291 0.18389435                 #> 4                 b      A    y3 dem60 1.17009128 0.10871690                 #> 5                c1      A    y4 dem60 1.34853557 0.14637355                 #> 6                a2      A    y6 dem65 1.20074397 0.14854212                 #> 7                c2      A    y8 dem65 1.25031700 0.13637267                 #> 8        x1_WITH_x1      S    x1    x1 0.08169543 0.01979127    1e-06        #> 9        x2_WITH_x2      S    x2    x2 0.11895803 0.07035983    1e-06        #> 10       x3_WITH_x3      S    x3    x3 0.46715672 0.08931237    1e-06        #> 11       y1_WITH_y1      S    y1    y1 1.96250172 0.40671919    1e-06        #> 12       y2_WITH_y2      S    y2    y2 6.49921810 1.20252769    1e-06        #> 13       y3_WITH_y3      S    y3    y3 5.32558348 0.95890941    1e-06        #> 14       y4_WITH_y4      S    y4    y4 2.87950381 0.63659586    1e-06        #> 15       y5_WITH_y5      S    y5    y5 2.37087652 0.45484953    1e-06        #> 16       y6_WITH_y6      S    y6    y6 4.37312946 0.82257502    1e-06        #> 17       y7_WITH_y7      S    y7    y7 3.56698909 0.68166517    1e-06        #> 18       y8_WITH_y8      S    y8    y8 2.96556937 0.62436037    1e-06        #> 19 ind60_WITH_ind60      S ind60 ind60 0.44829168 0.08674258    1e-06        #> 20 ind60_WITH_dem60      S ind60 dem60 0.63807551 0.19911416                 #> 21 dem60_WITH_dem60      S dem60 dem60 4.50351022 1.00587173    1e-06        #> 22 ind60_WITH_dem65      S ind60 dem65 0.81413737 0.21686414                 #> 23 dem60_WITH_dem65      S dem60 dem65 4.52637094 0.93201111                 #> 24 dem65_WITH_dem65      S dem65 dem65 4.75141774 1.04788975    1e-06        #> 25        one_TO_x1      M     1    x1 5.05438376 0.08406360                 #> 26        one_TO_x2      M     1    x2 4.79219456 0.17327235                 #> 27        one_TO_x3      M     1    x3 3.55768963 0.16123393                 #> 28        one_TO_y1      M     1    y1 5.46466632 0.29362329                 #> 29        one_TO_y2      M     1    y2 4.25644402 0.45272824                 #> 30        one_TO_y3      M     1    y3 6.56311128 0.39143132                 #> 31        one_TO_y4      M     1    y4 4.45253318 0.38417804                 #> 32        one_TO_y5      M     1    y5 5.13625219 0.30816376                 #> 33        one_TO_y6      M     1    y6 2.97807359 0.38684837                 #> 34        one_TO_y7      M     1    y7 6.19626378 0.36646597                 #> 35        one_TO_y8      M     1    y8 4.04339038 0.37226405                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             35                    790              3131.168 #>    Saturated:             77                    748                    NA #> Independence:             22                    803                    NA #> Number of observations/statistics: 75/825 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      1551.1683               3201.168                 3265.784 #> BIC:      -279.6473               3282.280                 3171.970 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-08-11 09:04:13  #> Wall clock time: 0.08833313 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Specify OpenMx Models with a lavaan-Style Syntax","text":"Bates, T. C., Maes, H., & Neale, M. C. (2019). umx: Twin Path-Based Structural Equation Modeling R. Twin Research Human Genetics, 22(1), 27–41. https://doi.org/10.1017/thg.2019.2 Bates, T. C., Prindle, J. J. (2014). ezMx. https://github.com/OpenMx/ezMx Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Cheung, M. W.-L. (2015). metaSEM: R package meta-analysis using structural equation modeling. Frontiers Psychology, 5. https://doi.org/10.3389/fpsyg.2014.01521 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02 van Lissa, C. J. (2023). tidySEM: Tidy Structural Equation Modeling. R package version 0.2.4, https://cjvanlissa.github.io/tidySEM/.","code":""},{"path":"/reference/check_all_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"check_all_fields — check_all_fields","title":"check_all_fields — check_all_fields","text":"checks elements parameter table","code":""},{"path":"/reference/check_all_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_all_fields — check_all_fields","text":"","code":"check_all_fields(parameter_table)"},{"path":"/reference/check_all_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_all_fields — check_all_fields","text":"parameter_table parameter table","code":""},{"path":"/reference/check_all_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_all_fields — check_all_fields","text":"nothing","code":""},{"path":"/reference/check_modifier_for_algebra.html","id":null,"dir":"Reference","previous_headings":"","what":"check_modifier_for_algebra — check_modifier_for_algebra","title":"check_modifier_for_algebra — check_modifier_for_algebra","text":"takes parameter table checks modifiers therein mxAlgebra. , replaces modifier temporary name adds algebra algebra data.frame","code":""},{"path":"/reference/check_modifier_for_algebra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_modifier_for_algebra — check_modifier_for_algebra","text":"","code":"check_modifier_for_algebra(parameter_table, directed, undirected)"},{"path":"/reference/check_modifier_for_algebra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_modifier_for_algebra — check_modifier_for_algebra","text":"parameter_table parameter table directed symbol used indicate directed effects (regressions loadings) undirected symbol used indicate undirected effects (variances covariances)","code":""},{"path":"/reference/check_modifier_for_algebra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_modifier_for_algebra — check_modifier_for_algebra","text":"parameter_table","code":""},{"path":"/reference/clean_syntax.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_syntax — clean_syntax","title":"clean_syntax — clean_syntax","text":"takes lavaan style syntax removes comments, white space, etc.","code":""},{"path":"/reference/clean_syntax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_syntax — clean_syntax","text":"","code":"clean_syntax(syntax)"},{"path":"/reference/clean_syntax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_syntax — clean_syntax","text":"syntax lavaan style syntax","code":""},{"path":"/reference/clean_syntax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_syntax — clean_syntax","text":"vector strings cleaned syntax","code":""},{"path":"/reference/extract_algebra_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_algebra_elements — extract_algebra_elements","title":"extract_algebra_elements — extract_algebra_elements","text":"extract variables/parameters mxAlgebra","code":""},{"path":"/reference/extract_algebra_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_algebra_elements — extract_algebra_elements","text":"","code":"extract_algebra_elements(mxAlgebra_formula, extracted = c())"},{"path":"/reference/extract_algebra_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_algebra_elements — extract_algebra_elements","text":"mxAlgebra_formula formula embedded mxAlgebra extracted used recursive function calls; set manually","code":""},{"path":"/reference/extract_algebra_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_algebra_elements — extract_algebra_elements","text":"vector names variables parameters used function call","code":""},{"path":"/reference/find_model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"find_model_name — find_model_name","title":"find_model_name — find_model_name","text":"checks model name syntax","code":""},{"path":"/reference/find_model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_model_name — find_model_name","text":"","code":"find_model_name(syntax)"},{"path":"/reference/find_model_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_model_name — find_model_name","text":"syntax lavaan like syntax","code":""},{"path":"/reference/find_model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find_model_name — find_model_name","text":"vector (1) model name (2) model syntax","code":""},{"path":"/reference/get_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"get_groups — get_groups","title":"get_groups — get_groups","text":"returns list groups multi group model","code":""},{"path":"/reference/get_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_groups — get_groups","text":"","code":"get_groups(multi_group_model)"},{"path":"/reference/get_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_groups — get_groups","text":"multi_group_model multi group model created mxsem_group_by","code":""},{"path":"/reference/get_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_groups — get_groups","text":"list data group","code":""},{"path":"/reference/get_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_groups — get_groups","text":"","code":"# THE FOLLOWING EXAMPLE IS ADAPTED FROM # https://openmx.ssri.psu.edu/docs/OpenMx/latest/_static/Rdoc/mxModel.html library(mxsem)  model <- 'spatial =~ visual + cubes + paper           verbal  =~ general + paragrap + sentence           math    =~ numeric + series + arithmet'  mg_model <- mxsem(model = model,                   data  = OpenMx::HS.ability.data) |>   # we want separate models for all combinations of grades and schools:   mxsem_group_by(grouping_variables = \"school\") |>   mxTryHard() #> Warning: This function is very experimental and may not yet work properly. Use with caution. #> The following parameters will be the same across groups:  #> The following parameters will be group specific: spatial→cubes, spatial→paper, verbal→paragrap, verbal→sentence, math→series, math→arithmet, visual↔visual, cubes↔cubes, paper↔paper, general↔general, paragrap↔paragrap, sentence↔sentence, numeric↔numeric, series↔series, arithmet↔arithmet, spatial↔spatial, spatial↔verbal, verbal↔verbal, spatial↔math, verbal↔math, math↔math, one→visual, one→cubes, one→paper, one→general, one→paragrap, one→sentence, one→numeric, one→series, one→arithmet #> Running untitled1 with 60 parameters #>  #> Beginning initial fit attempt #> Running untitled1 with 60 parameters #>  #>  Lowest minimum so far:  15915.8948628543 #>  OpenMx status code 6 not in list of acceptable status codes, (0,0) #>  #> Beginning fit attempt 1 of at maximum 10 extra tries #> Running untitled1 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919985549 #>  Not all eigenvalues of the Hessian are positive: 2881324677.33359, 36009.3516286094, 12023.6703681719, 5729.48946656132, 4937.78018906414, 1953.20743294049, 1890.59548458872, 1141.93768709214, 787.053832922359, 354.299869949574, 310.059988684748, 140.308070837012, 71.960524679851, 69.7737543984885, 46.2892558097408, 44.9970707911168, 41.9999858871418, 24.9093324641401, 23.5191899890895, 22.8577228952339, 20.9223694392101, 18.3025744933685, 16.0851747896718, 16.018845743146, 15.310385828649, 9.90808200029694, 8.45369857439435, 5.88962751326757, 5.53488330138983, 4.35940260488893, 4.18490800861019, 3.49096374055486, 3.16683866275163, 2.82736036010931, 1.59910088820855, 1.51503506990849, 1.43956890190422, 1.15853458220828, 1.05434253829188, 0.740020523034631, 0.518708350463338, 0.502847939424892, 0.492307464631392, 0.411213793573148, 0.327917491475641, 0.240774010995978, 0.184333452645261, 0.150707405584368, 0.0854720418961566, 0.0836640606223451, 0.0414555910630677, 0.0385806931620717, 0.0370749105068254, 0.0339971038622095, 0.0295537215170684, 0.021067635452236, 0.00785326267622024, 0.00757395103844831, 0.00250913156290403, -1.55655451604865e-06 #>  #> Beginning fit attempt 2 of at maximum 10 extra tries #> Running untitled1 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919074347 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=15915.892 (started at 11279122)  (3 attempt(s): 3 valid, 0 errors) #>  Start values from best fit: #> 0.429696324732396,0.286024397585417,0.312259740235881,0.442363859837346,2.27691771976176,0.956883492242165,23.8894216200827,15.2682075393357,5.97877715105563,55.1488164616464,3.53184435633436,5.84673040324623,14.0527084575859,39.6645663103217,13.6972693242364,23.5809085727407,25.1619866544482,79.8223569879943,12.1068191452977,18.9621175559387,9.13346418813602,29.5793258731495,24.7999951477868,14.3034555329686,44.8483120475232,9.9517398564783,18.8482871851452,14.4551793966412,18.751732741285,25.8276029806873,0.318407659498922,0.222407964517981,0.302368730073987,0.479270268445379,-464.258471510988,-133.869634378721,17.4577160519638,20.7378606419435,6.4239542394658,48.039286873544,3.66215052845238,6.6871834935806,19.4772292706673,12.4486942624279,13.7506093409822,32.7899172753595,25.3475083356719,89.8901007982516,-0.0678139344851871,-0.0855209149857523,0.00030325245185672,29.6474204666946,23.9358983573264,14.1602534807989,36.6986412140479,8.46793193567707,15.9807408169199,13.8910283708663,17.5448422432478,22.7692116297089  # let's summarize the results: summarize_multi_group_model(mg_model) #>  #>  #> -------------------------------------------------------------------------------- #> Common Parameters: #>  [1] name      matrix    row       col       Estimate  Std.Error lbound    #>  [8] ubound    lboundMet uboundMet #> <0 rows> (or 0-length row.names) #> -------------------------------------------------------------------------------- #> group_1: #> # A tibble: 1 × 1 #>   school      #>   <fct>       #> 1 Grant-White #>  #>                         name              matrix      row      col   Estimate #> 1      spatial→cubes_group_1 untitled1_group_1.A    cubes  spatial  0.4296963 #> 2      spatial→paper_group_1 untitled1_group_1.A    paper  spatial  0.2860244 #> 3    verbal→paragrap_group_1 untitled1_group_1.A paragrap   verbal  0.3122597 #> 4    verbal→sentence_group_1 untitled1_group_1.A sentence   verbal  0.4423639 #> 5        math→series_group_1 untitled1_group_1.A   series     math  2.2769177 #> 6      math→arithmet_group_1 untitled1_group_1.A arithmet     math  0.9568835 #> 7      visual↔visual_group_1 untitled1_group_1.S   visual   visual 23.8894216 #> 8        cubes↔cubes_group_1 untitled1_group_1.S    cubes    cubes 15.2682075 #> 9        paper↔paper_group_1 untitled1_group_1.S    paper    paper  5.9787772 #> 10   general↔general_group_1 untitled1_group_1.S  general  general 55.1488165 #> 11 paragrap↔paragrap_group_1 untitled1_group_1.S paragrap paragrap  3.5318444 #> 12 sentence↔sentence_group_1 untitled1_group_1.S sentence sentence  5.8467304 #> 13   numeric↔numeric_group_1 untitled1_group_1.S  numeric  numeric 14.0527085 #> 14     series↔series_group_1 untitled1_group_1.S   series   series 39.6645663 #> 15 arithmet↔arithmet_group_1 untitled1_group_1.S arithmet arithmet 13.6972693 #> 16   spatial↔spatial_group_1 untitled1_group_1.S  spatial  spatial 23.5809086 #> 17    spatial↔verbal_group_1 untitled1_group_1.S  spatial   verbal 25.1619867 #> 18     verbal↔verbal_group_1 untitled1_group_1.S   verbal   verbal 79.8223570 #> 19      spatial↔math_group_1 untitled1_group_1.S  spatial     math 12.1068191 #> 20       verbal↔math_group_1 untitled1_group_1.S   verbal     math 18.9621176 #> 21         math↔math_group_1 untitled1_group_1.S     math     math  9.1334642 #> 22        one→visual_group_1 untitled1_group_1.M        1   visual 29.5793259 #> 23         one→cubes_group_1 untitled1_group_1.M        1    cubes 24.7999951 #> 24         one→paper_group_1 untitled1_group_1.M        1    paper 14.3034555 #> 25       one→general_group_1 untitled1_group_1.M        1  general 44.8483120 #> 26      one→paragrap_group_1 untitled1_group_1.M        1 paragrap  9.9517399 #> 27      one→sentence_group_1 untitled1_group_1.M        1 sentence 18.8482872 #> 28       one→numeric_group_1 untitled1_group_1.M        1  numeric 14.4551794 #> 29        one→series_group_1 untitled1_group_1.M        1   series 18.7517327 #> 30      one→arithmet_group_1 untitled1_group_1.M        1 arithmet 25.8276030 #>     Std.Error lbound ubound lboundMet uboundMet #> 1  24.9037882     NA     NA     FALSE     FALSE #> 2  39.6622211     NA     NA     FALSE     FALSE #> 3  93.4253200     NA     NA     FALSE     FALSE #> 4  70.1639596     NA     NA     FALSE     FALSE #> 5   9.3352733     NA     NA     FALSE     FALSE #> 6  16.7201928     NA     NA     FALSE     FALSE #> 7   0.5212566  1e-06     NA     FALSE     FALSE #> 8   1.0288039  1e-06     NA     FALSE     FALSE #> 9   2.5980818  1e-06     NA     FALSE     FALSE #> 10  0.2523914  1e-06     NA     FALSE     FALSE #> 11  3.4804341  1e-06     NA     FALSE     FALSE #> 12  1.9305246  1e-06     NA     FALSE     FALSE #> 13  1.0515824  1e-06     NA     FALSE     FALSE #> 14  0.3250416  1e-06     NA     FALSE     FALSE #> 15  1.0888323  1e-06     NA     FALSE     FALSE #> 16  0.6516031  1e-06     NA     FALSE     FALSE #> 17  0.6049615     NA     NA     FALSE     FALSE #> 18  0.2724801  1e-06     NA     FALSE     FALSE #> 19  1.8694247     NA     NA     FALSE     FALSE #> 20  1.2120947     NA     NA     FALSE     FALSE #> 21  2.2905729  1e-06     NA     FALSE     FALSE #> 22  4.2133898     NA     NA     FALSE     FALSE #> 23  5.9192583     NA     NA     FALSE     FALSE #> 24  9.4067036     NA     NA     FALSE     FALSE #> 25  2.9318542     NA     NA     FALSE     FALSE #> 26 10.8878455     NA     NA     FALSE     FALSE #> 27  8.1087416     NA     NA     FALSE     FALSE #> 28  5.9844863     NA     NA     FALSE     FALSE #> 29  3.3271878     NA     NA     FALSE     FALSE #> 30  6.0895770     NA     NA     FALSE     FALSE #> -------------------------------------------------------------------------------- #> group_2: #> # A tibble: 1 × 1 #>   school  #>   <fct>   #> 1 Pasteur #>  #>                         name              matrix      row      col #> 31     spatial→cubes_group_2 untitled1_group_2.A    cubes  spatial #> 32     spatial→paper_group_2 untitled1_group_2.A    paper  spatial #> 33   verbal→paragrap_group_2 untitled1_group_2.A paragrap   verbal #> 34   verbal→sentence_group_2 untitled1_group_2.A sentence   verbal #> 35       math→series_group_2 untitled1_group_2.A   series     math #> 36     math→arithmet_group_2 untitled1_group_2.A arithmet     math #> 37     visual↔visual_group_2 untitled1_group_2.S   visual   visual #> 38       cubes↔cubes_group_2 untitled1_group_2.S    cubes    cubes #> 39       paper↔paper_group_2 untitled1_group_2.S    paper    paper #> 40   general↔general_group_2 untitled1_group_2.S  general  general #> 41 paragrap↔paragrap_group_2 untitled1_group_2.S paragrap paragrap #> 42 sentence↔sentence_group_2 untitled1_group_2.S sentence sentence #> 43   numeric↔numeric_group_2 untitled1_group_2.S  numeric  numeric #> 44     series↔series_group_2 untitled1_group_2.S   series   series #> 45 arithmet↔arithmet_group_2 untitled1_group_2.S arithmet arithmet #> 46   spatial↔spatial_group_2 untitled1_group_2.S  spatial  spatial #> 47    spatial↔verbal_group_2 untitled1_group_2.S  spatial   verbal #> 48     verbal↔verbal_group_2 untitled1_group_2.S   verbal   verbal #> 49      spatial↔math_group_2 untitled1_group_2.S  spatial     math #> 50       verbal↔math_group_2 untitled1_group_2.S   verbal     math #> 51         math↔math_group_2 untitled1_group_2.S     math     math #> 52        one→visual_group_2 untitled1_group_2.M        1   visual #> 53         one→cubes_group_2 untitled1_group_2.M        1    cubes #> 54         one→paper_group_2 untitled1_group_2.M        1    paper #> 55       one→general_group_2 untitled1_group_2.M        1  general #> 56      one→paragrap_group_2 untitled1_group_2.M        1 paragrap #> 57      one→sentence_group_2 untitled1_group_2.M        1 sentence #> 58       one→numeric_group_2 untitled1_group_2.M        1  numeric #> 59        one→series_group_2 untitled1_group_2.M        1   series #> 60      one→arithmet_group_2 untitled1_group_2.M        1 arithmet #>         Estimate    Std.Error lbound ubound lboundMet uboundMet #> 31  3.184077e-01 2.685600e+01     NA     NA     FALSE     FALSE #> 32  2.224080e-01 4.787092e+01     NA     NA     FALSE     FALSE #> 33  3.023687e-01 1.021691e+02     NA     NA     FALSE     FALSE #> 34  4.792703e-01 7.129261e+01     NA     NA     FALSE     FALSE #> 35 -4.642585e+02 7.225536e-02     NA     NA     FALSE     FALSE #> 36 -1.338696e+02 1.064656e-01     NA     NA     FALSE     FALSE #> 37  1.745772e+01 5.399522e-01  1e-06     NA     FALSE     FALSE #> 38  2.073786e+01 8.178606e-01  1e-06     NA     FALSE     FALSE #> 39  6.423954e+00 2.577448e+00  1e-06     NA     FALSE     FALSE #> 40  4.803929e+01 2.871769e-01  1e-06     NA     FALSE     FALSE #> 41  3.662151e+00 3.556516e+00  1e-06     NA     FALSE     FALSE #> 42  6.687183e+00 1.687191e+00  1e-06     NA     FALSE     FALSE #> 43  1.947723e+01 9.069229e-01  1e-06     NA     FALSE     FALSE #> 44  1.244869e+01 4.049034e-01  1e-06     NA     FALSE     FALSE #> 45  1.375061e+01 1.215510e+00  1e-06     NA     FALSE     FALSE #> 46  3.278992e+01 5.320073e-01  1e-06     NA     FALSE     FALSE #> 47  2.534751e+01 4.935328e-01     NA     NA     FALSE     FALSE #> 48  8.989010e+01 2.223162e-01  1e-06     NA     FALSE     FALSE #> 49 -6.781393e-02 3.098339e+02     NA     NA     FALSE     FALSE #> 50 -8.552091e-02 1.932178e+02     NA     NA     FALSE     FALSE #> 51  3.032525e-04 7.601277e+04  1e-06     NA      TRUE     FALSE #> 52  2.964742e+01 4.366879e+00     NA     NA     FALSE     FALSE #> 53  2.393590e+01 5.375123e+00     NA     NA     FALSE     FALSE #> 54  1.416025e+01 9.541766e+00     NA     NA     FALSE     FALSE #> 55  3.669864e+01 3.185122e+00     NA     NA     FALSE     FALSE #> 56  8.467932e+00 1.120904e+01     NA     NA     FALSE     FALSE #> 57  1.598074e+01 7.719790e+00     NA     NA     FALSE     FALSE #> 58  1.389103e+01 5.660159e+00     NA     NA     FALSE     FALSE #> 59  1.754484e+01 3.780316e+00     NA     NA     FALSE     FALSE #> 60  2.276921e+01 6.552695e+00     NA     NA     FALSE     FALSE #>  #> --------------------------------------------------------------------------------  # let's get the groups: get_groups(mg_model) #> <list_of< #>   tbl_df< #>     id      : integer #>     Gender  : factor<aa50b> #>     grade   : integer #>     agey    : integer #>     agem    : integer #>     school  : factor<b7a18> #>     visual  : integer #>     cubes   : integer #>     paper   : integer #>     flags   : integer #>     general : integer #>     paragrap: integer #>     sentence: integer #>     wordc   : integer #>     wordm   : integer #>     addition: integer #>     code    : integer #>     counting: integer #>     straight: integer #>     wordr   : integer #>     numberr : integer #>     figurer : integer #>     object  : integer #>     numberf : integer #>     figurew : integer #>     deduct  : integer #>     numeric : integer #>     problemr: integer #>     series  : integer #>     arithmet: integer #>     paperrev: integer #>     flagssub: integer #>   > #> >[2]> #> $group_1 #> # A tibble: 145 × 32 #>       id Gender grade  agey  agem school      visual cubes paper flags general #>    <int> <fct>  <int> <int> <int> <fct>        <int> <int> <int> <int>   <int> #>  1   201 Male       7    13     0 Grant-White     23    19    13     4      46 #>  2   202 Female     7    11    10 Grant-White     33    22    12    17      43 #>  3   203 Male       7    12     6 Grant-White     34    24    14    22      36 #>  4   204 Male       7    11    11 Grant-White     29    23    12     9      38 #>  5   205 Male       7    12     5 Grant-White     16    25    11    10      51 #>  6   206 Female     7    12     6 Grant-White     30    25    12    20      42 #>  7   208 Female     7    12     8 Grant-White     36    33    19    36      69 #>  8   209 Female     7    11    11 Grant-White     28    25    10     9      35 #>  9   210 Female     7    12     5 Grant-White     30    25    15    11      32 #> 10   211 Female     7    12     5 Grant-White     20    25    13     6      39 #> # ℹ 135 more rows #> # ℹ 21 more variables: paragrap <int>, sentence <int>, wordc <int>, #> #   wordm <int>, addition <int>, code <int>, counting <int>, straight <int>, #> #   wordr <int>, numberr <int>, figurer <int>, object <int>, numberf <int>, #> #   figurew <int>, deduct <int>, numeric <int>, problemr <int>, series <int>, #> #   arithmet <int>, paperrev <int>, flagssub <int> #>  #> $group_2 #> # A tibble: 156 × 32 #>       id Gender grade  agey  agem school  visual cubes paper flags general #>    <int> <fct>  <int> <int> <int> <fct>    <int> <int> <int> <int>   <int> #>  1     1 Male       7    13     1 Pasteur     20    31    12     3      40 #>  2     2 Female     7    13     7 Pasteur     32    21    12    17      34 #>  3     3 Female     7    13     1 Pasteur     27    21    12    15      20 #>  4     4 Male       7    13     2 Pasteur     32    31    16    24      42 #>  5     5 Female     7    12     2 Pasteur     29    19    12     7      37 #>  6     6 Female     7    14     1 Pasteur     32    20    11    18      31 #>  7     7 Male       7    12     1 Pasteur     17    24    12     8      40 #>  8     8 Female     7    12     2 Pasteur     34    25    13    15      29 #>  9     9 Female     7    13     0 Pasteur     27    23    11    12      29 #> 10    11 Female     7    12     5 Pasteur     21    21    10     6      33 #> # ℹ 146 more rows #> # ℹ 21 more variables: paragrap <int>, sentence <int>, wordc <int>, #> #   wordm <int>, addition <int>, code <int>, counting <int>, straight <int>, #> #   wordr <int>, numberr <int>, figurer <int>, object <int>, numberf <int>, #> #   figurew <int>, deduct <int>, numeric <int>, problemr <int>, series <int>, #> #   arithmet <int>, paperrev <int>, flagssub <int> #>"},{"path":"/reference/get_individual_algebra_results.html","id":null,"dir":"Reference","previous_headings":"","what":"get_individual_algebra_results — get_individual_algebra_results","title":"get_individual_algebra_results — get_individual_algebra_results","text":"evaluates algebras subject data set. function useful algebras definition variables (e.g., mnlfa).","code":""},{"path":"/reference/get_individual_algebra_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_individual_algebra_results — get_individual_algebra_results","text":"","code":"get_individual_algebra_results(   mxModel,   algebra_names = NULL,   progress_bar = TRUE )"},{"path":"/reference/get_individual_algebra_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_individual_algebra_results — get_individual_algebra_results","text":"mxModel mxModel algebras algebra_names optional: compute individual algebras subset parameters progress_bar progress bar shown?","code":""},{"path":"/reference/get_individual_algebra_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_individual_algebra_results — get_individual_algebra_results","text":"list data frames. list contains data frames algebras. data frames contain individual specific algebra results well definition variables used predict said algebra","code":""},{"path":"/reference/get_individual_algebra_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_individual_algebra_results — get_individual_algebra_results","text":"","code":"library(mxsem)  set.seed(123) dataset <- simulate_moderated_nonlinear_factor_analysis(N = 50)  model <- \"   xi  =~ x1 + x2 + x3   eta =~ y1 + y2 + y3   eta ~  {a := a0 + data.k*a1}*xi   \" fit <- mxsem(model = model,              data = dataset) |>   mxTryHard() #> Running untitled3 with 20 parameters #>  #> Beginning initial fit attempt #> Running untitled3 with 20 parameters #>  #>  Lowest minimum so far:  206.073812137584 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=206.07381 (started at 1259.055)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 0.860279357599352,0.93310011571659,0.818073619568103,0.917510124392146,0.0504725158826804,0.0290778601489915,0.0469073039826642,0.0419027629442995,0.0380640416567419,0.0293279505054066,0.806082506056986,0.191196376163287,0.0225271378234348,0.00927744154685788,-0.0179061344681825,0.0495250710766533,-0.00882794826549067,0.0257245373987249,0.622360653197647,-0.181971897646743  algebra_results <- get_individual_algebra_results(mxModel = fit,                                                   progress_bar = FALSE)  # the following plot will only show two data points because there is only # two values for the definition variable k (0 or 1).  plot(x = algebra_results[[\"a\"]]$k,      y = algebra_results[[\"a\"]]$algebra_result)"},{"path":"/reference/mxsem.html","id":null,"dir":"Reference","previous_headings":"","what":"mxsem — mxsem","title":"mxsem — mxsem","text":"Create extended SEM OpenMx (Boker et al., 2011) using lavaan-style (Rosseel, 2012) syntax.","code":""},{"path":"/reference/mxsem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mxsem — mxsem","text":"","code":"mxsem(   model,   data,   scale_loadings = TRUE,   scale_latent_variances = FALSE,   add_intercepts = TRUE,   add_variances = TRUE,   add_exogenous_latent_covariances = TRUE,   add_exogenous_manifest_covariances = TRUE,   lbound_variances = TRUE,   directed = unicode_directed(),   undirected = unicode_undirected(),   return_parameter_table = FALSE )"},{"path":"/reference/mxsem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mxsem — mxsem","text":"model model syntax similar lavaan's syntax data raw data used fit model. Alternatively, object created OpenMx::mxData can used (e.g., OpenMx::mxData(observed = cov(OpenMx::Bollen), means = colMeans(OpenMx::Bollen), numObs = nrow(OpenMx::Bollen), type = \"cov\")). scale_loadings first loading latent variable used scaling? scale_latent_variances latent variances used scaling? add_intercepts intercepts manifest variables added automatically? set false, intercepts must added manually. intercepts added, mxsem automatically use just observed covariances observed means. add_variances variances manifest latent variables added automatically? add_exogenous_latent_covariances covariances exogenous latent variables added automatically? add_exogenous_manifest_covariances covariances exogenous manifest variables added automatically? lbound_variances lower bound variances set 0.000001? directed symbol used indicate directed effects (regressions loadings) undirected symbol used indicate undirected effects (variances covariances) return_parameter_table set TRUE, internal parameter table returend together mxModel","code":""},{"path":"/reference/mxsem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mxsem — mxsem","text":"mxModel object can fitted mxRun mxTryHard. return_parameter_table TRUE, list mxModel parameter table returned.","code":""},{"path":"/reference/mxsem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mxsem — mxsem","text":"Setting SEM can tedious. lavaan (Rosseel, 2012) package provides great syntax make process easier. objective mxsem provide similar syntax OpenMx. OpenMx flexible R package extended SEM. However, note mxsem covers small part OpenMx framework focusing \"standard\" SEM. Similar lavaan's sem()-function, mxsem tries set parts model automatically (e.g., adding variances automatically scaling latent variables automatically). want unlock full potential OpenMx, mxsem may best option. Warning: syntax settings mxsem may differ lavaan cases. See vignette(\"Syntax\", package = \"mxsem\") details syntax default arguments.","code":""},{"path":"/reference/mxsem.html","id":"alternatives","dir":"Reference","previous_headings":"","what":"Alternatives","title":"mxsem — mxsem","text":"find similar functions following packages: metaSEM (Cheung, 2015) provides lavaan2RAM function can combined create.mxModel function. combination offers features mxsem. instance, constraints form < b supported. mxsem constraints require algebras (e.g., !diff; := b - exp(diff)). umx (Bates et al., 2019) provides umxRAM umxLav2RAM functions can parse single lavaan-style statements (e.g., eta =~ y1 + y2 + y3) entire lavaan models OpenMx models. tidySEM (van Lissa, 2023) provides as_ram function translate lavaan syntax OpenMx also implements unified syntax specify , lavaan OpenMx models. Additionally, works well tidyverse. ezMx (Bates, et al. 2014) simplifies fitting SEM OpenMx also provides translation lavaan models OpenMx lavaan..OpenMx function. mxsem implements syntax parser scratch, can extend lavaan syntax account specific OpenMx features. enables implicit transformations curly braces.","code":""},{"path":"/reference/mxsem.html","id":"citation","dir":"Reference","previous_headings":"","what":"Citation","title":"mxsem — mxsem","text":"Cite OpenMx (Boker et al., 2011) modeling lavaan syntax (Rosseel, 2012). mxsem just small package lets OpenMx heavy lifting.","code":""},{"path":"/reference/mxsem.html","id":"defaults","dir":"Reference","previous_headings":"","what":"Defaults","title":"mxsem — mxsem","text":"default, mxsem scales latent variables setting loadings first item 1. can changed setting scale_loadings = FALSE function call. Setting scale_latent_variances = TRUE sets latent variances 1 scaling. mxsem add intercepts manifest variables well variances manifest latent variables. lower bound 1e-6 added variances. Finally, covariances exogenous variables added. options can changed calling mxsem.","code":""},{"path":"/reference/mxsem.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"mxsem — mxsem","text":"syntax , part, identical lavaan. following specifies loadings latent variable eta manifest variables y1-y4:   Regressions specified ~:   Add covariances ~~   Intercepts specified ~1","code":"eta =~ y1 + y2 + y3 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2  eta ~ 1"},{"path":"/reference/mxsem.html","id":"parameter-labels-and-constraints","dir":"Reference","previous_headings":"","what":"Parameter labels and constraints","title":"mxsem — mxsem","text":"Add labels parameters follows:   Fix parameters using numeric values instead labels:","code":"xi  =~ l1*x1 + l2*x2 + l3*x3 eta =~ l4*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi"},{"path":"/reference/mxsem.html","id":"bounds","dir":"Reference","previous_headings":"","what":"Bounds","title":"mxsem — mxsem","text":"Lower upper bounds allow constraints parameters. instance, lower bound can prevent negative variances.   Upper bounds specified v < 10. Note parameter label must always come first. following allowed: 0 < v 10 > v.","code":"xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi # residual variance for x1 x1 ~~ v*x1 # bound: v > 0"},{"path":"/reference/mxsem.html","id":"-non-linear-constraints","dir":"Reference","previous_headings":"","what":"(Non-)linear constraints","title":"mxsem — mxsem","text":"Assume latent construct eta observed twice, eta1 first observation eta2 second. want define loadings eta2 observations l_1 + delta_l1. delta_l1 zero, measurement invariance.   Alternatively, implicit transformations can used follows:   Specific labels transformation results can also provided:   inspired approach metaSEM (Cheung, 2015).","code":"eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ l4*y4 + l5*y5 + l6*y6 # define new delta-parameter !delta_1; !delta_2; !delta_3 # redefine l4-l6 l4 := l1 + delta_1 l5 := l2 + delta_2 l6 := l3 + delta_3 eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ {l1 + delta_1} * y4 + {l2 + delta_2} * y5 + {l3 + delta_3} * y6 eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ {l4 := l1 + delta_1} * y4 + {l5 := l2 + delta_2} * y5 + {l6 := l3 + delta_3} * y6"},{"path":"/reference/mxsem.html","id":"definition-variables","dir":"Reference","previous_headings":"","what":"Definition variables","title":"mxsem — mxsem","text":"Definition variables allow person-specific parameter constraints. Use data.-prefix specify definition variables.","code":"I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  I ~ int*1 S ~ slp*1"},{"path":"/reference/mxsem.html","id":"starting-values","dir":"Reference","previous_headings":"","what":"Starting Values","title":"mxsem — mxsem","text":"mxsem differs lavaan specification starting values. Instead providing starting values model syntax, set_starting_values function used.","code":""},{"path":"/reference/mxsem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mxsem — mxsem","text":"Bates, T. C., Maes, H., & Neale, M. C. (2019). umx: Twin Path-Based Structural Equation Modeling R. Twin Research Human Genetics, 22(1), 27–41. https://doi.org/10.1017/thg.2019.2 Bates, T. C., Prindle, J. J. (2014). ezMx. https://github.com/OpenMx/ezMx Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Cheung, M. W.-L. (2015). metaSEM: R package meta-analysis using structural equation modeling. Frontiers Psychology, 5. https://doi.org/10.3389/fpsyg.2014.01521 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02 van Lissa, C. J. (2023). tidySEM: Tidy Structural Equation Modeling. R package version 0.2.4, https://cjvanlissa.github.io/tidySEM/.","code":""},{"path":"/reference/mxsem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mxsem — mxsem","text":"","code":"# THE FOLLOWING EXAMPLE IS ADAPTED FROM LAVAAN library(mxsem)  model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  fit <- mxsem(model = model,             data  = OpenMx::Bollen) |>   mxTryHard() #> Running untitled13 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3274.15170117083 #>  Not all eigenvalues of the Hessian are positive: 1002820.9693578, 4177.87917816189, 1100.79628533037, 715.798788568486, 466.997947118047, 315.164898674905, 191.210996173414, 124.723726935937, 113.088444201225, 104.256081240764, 84.1320091971086, 81.3076257177491, 69.4606363216076, 46.4275404178963, 46.0430712481736, 41.8253108289941, 41.6287312581773, 35.4717906795529, 32.9203894004398, 32.8766157598417, 27.9622813632953, 26.6406390383752, 25.2192983941879, 17.916483821106, 14.7320256689223, 13.9566137097917, 10.4036708003971, 9.66303168104416, 7.47548627862979, 5.35388822052549, 4.85071826227911, 3.97666777725942, 3.17327658704878, 2.7085959711609, 2.45460626023246, 1.86311038744241, 1.48654619095132, 0.867182184265156, 0.711663598845945, 0.00130784632992241, -0.317322692530756 #>  #> Beginning fit attempt 1 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  Not all eigenvalues of the Hessian are positive: 1002820.9693578, 4177.87917816189, 1100.79628533037, 715.798788568486, 466.997947118047, 315.164898674905, 191.210996173414, 124.723726935937, 113.088444201225, 104.256081240764, 84.1320091971086, 81.3076257177491, 69.4606363216076, 46.4275404178963, 46.0430712481736, 41.8253108289941, 41.6287312581773, 35.4717906795529, 32.9203894004398, 32.8766157598417, 27.9622813632953, 26.6406390383752, 25.2192983941879, 17.916483821106, 14.7320256689223, 13.9566137097917, 10.4036708003971, 9.66303168104416, 7.47548627862979, 5.35388822052549, 4.85071826227911, 3.97666777725942, 3.17327658704878, 2.7085959711609, 2.45460626023246, 1.86311038744241, 1.48654619095132, 0.867182184265156, 0.711663598845945, 0.00130784632992241, -0.317322692530756 #>  #> Beginning fit attempt 2 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  Not all eigenvalues of the Hessian are positive: 1095887.4576289, 4336.88859812291, 1101.60095584567, 715.741581089665, 466.998437149653, 315.194564297537, 191.214222532952, 124.73892882919, 113.088825054082, 104.256184668642, 84.1319306999197, 81.3074748088679, 69.4919938064738, 46.4274267129193, 46.042779484438, 41.8254181053709, 41.6255353605796, 35.4737582650051, 32.9198091671539, 32.8695838557629, 27.9513582497545, 26.6403953018149, 25.2229261942084, 17.9163618466597, 14.7230331580777, 13.9602445171162, 10.4029465882407, 9.66830000581792, 7.4764601631925, 5.35130724182903, 4.85510731933932, 3.97589558284252, 3.1704829839838, 2.70908859897041, 2.45409708182186, 1.86196187966812, 1.48615988724095, 0.863169838347198, 0.690872511605086, 0.00126393982350972, -0.301573566565726 #>  #> Beginning fit attempt 3 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3274.15163155368 #>  Not all eigenvalues of the Hessian are positive: 284798.769509955, 2549.7339611363, 1079.27039998206, 716.771194425571, 467.000720559717, 314.738340383315, 191.140661163423, 124.539638654959, 113.089880357975, 104.257004215137, 84.1321828908432, 81.3085153018582, 69.0018968616705, 46.4277217344138, 46.0429474323784, 42.0092498750708, 41.6714199906983, 35.4602515051097, 32.9212115246584, 32.888003738862, 28.0876766268602, 26.6411930020571, 25.2308687208095, 17.9169707979993, 14.9396095512264, 13.974346303053, 10.4331834050266, 9.68150043577825, 7.46689661248203, 5.41096702444768, 4.86554277268622, 4.0242657743474, 3.23299167546002, 2.70778327806949, 2.49858022640508, 1.88866518211077, 1.53414590989677, 1.23971867362244, 0.838322570143965, 0.00270159642946001, -0.475802037693299 #>  #> Beginning fit attempt 4 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  Not all eigenvalues of the Hessian are positive: 284798.769509955, 2549.7339611363, 1079.27039998206, 716.771194425571, 467.000720559717, 314.738340383315, 191.140661163423, 124.539638654959, 113.089880357975, 104.257004215137, 84.1321828908432, 81.3085153018582, 69.0018968616705, 46.4277217344138, 46.0429474323784, 42.0092498750708, 41.6714199906983, 35.4602515051097, 32.9212115246584, 32.888003738862, 28.0876766268602, 26.6411930020571, 25.2308687208095, 17.9169707979993, 14.9396095512264, 13.974346303053, 10.4331834050266, 9.68150043577825, 7.46689661248203, 5.41096702444768, 4.86554277268622, 4.0242657743474, 3.23299167546002, 2.70778327806949, 2.49858022640508, 1.88866518211077, 1.53414590989677, 1.23971867362244, 0.838322570143965, 0.00270159642946001, -0.475802037693299 #>  #> Beginning fit attempt 5 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  Not all eigenvalues of the Hessian are positive: 348677.73085087, 2745.5061438744, 1084.46232491371, 716.62417631028, 466.999851834883, 314.816467248177, 191.147275465012, 124.571426096468, 113.088825989555, 104.256430192424, 84.1320238704133, 81.3072623603106, 69.0885052137753, 46.4272997229159, 46.0427059622244, 41.9725327759057, 41.6681060032252, 35.4573644980286, 32.9198890396413, 32.8863043401259, 28.0616881551836, 26.6399994123142, 25.228529599107, 17.9163840232495, 14.898188647715, 13.9702946445312, 10.4259195306958, 9.6768959730061, 7.47025163865757, 5.40016478972039, 4.86217798680426, 4.01280021695399, 3.21813770251536, 2.70914615342392, 2.48851191520276, 1.88207249025303, 1.52384310326366, 1.1587837410884, 0.831955996214121, 0.00241703483254824, -0.447475094189825 #>  #> Beginning fit attempt 6 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3234.2876855728 #>  Not all eigenvalues of the Hessian are positive: 7598.57597817472, 1688.56359939695, 539.290535353664, 419.003575947642, 343.804573752009, 338.013425505306, 242.647822318344, 226.520961149572, 179.226984898953, 144.885970225671, 92.0293538950684, 81.0097659424557, 74.2518964424219, 73.5026364672453, 66.3328181163647, 42.7403096523063, 42.2691565112523, 36.0010704691878, 30.668714377437, 28.9584225606522, 22.9697436559588, 19.8982480528, 16.2268370934855, 14.1540607158276, 10.9222196334779, 9.84068882509725, 9.73988036580468, 9.04820257410117, 4.59963356501852, 4.3848690245792, 4.25184980918354, 3.10261191262817, 2.0561702557282, 1.96459038271992, 1.60223037518751, 1.29185272264826, 1.0085922850472, 0.668779485070543, 0.434913485764363, 0.327634180665386, -39.3029899422406 #>  #> Beginning fit attempt 7 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3234.28768556172 #>  Not all eigenvalues of the Hessian are positive: 7598.54465251359, 1688.56226687367, 539.299514018853, 419.003873887013, 343.816416161985, 338.020946238197, 242.654201343044, 226.541543024551, 179.229989013562, 144.893491147561, 92.0299023481529, 81.0105291174884, 74.2577001311838, 73.5029022821897, 66.3428232549056, 42.7408238931461, 42.2641494751532, 36.0038521667295, 30.6755726329355, 28.9587221973923, 22.9699043276952, 19.8988686999703, 16.2333610814914, 14.1543711603645, 10.9238654858736, 9.84132728108342, 9.74384396005334, 9.04747193372708, 4.6044876868251, 4.38396911488603, 4.25831726634215, 3.10420296260445, 2.05836341270424, 1.96572010852991, 1.60313797578899, 1.29368916054298, 1.00856658923608, 0.668641669932772, 0.43703238193563, 0.327851407063622, -39.2933247207047 #>  #> Beginning fit attempt 8 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3234.28768555776 #>  Not all eigenvalues of the Hessian are positive: 7598.5384191669, 1688.56219088878, 539.28559907923, 419.004541415532, 343.808437180686, 338.008215204671, 242.653642676101, 226.532900345163, 179.229359236613, 144.888570088225, 92.0294275720868, 81.010138845785, 74.2546620027886, 73.5025322298607, 66.33422191362, 42.7405414776084, 42.2707635255777, 36.002759645056, 30.6720357649246, 28.9584209198202, 22.9688169917519, 19.8985346257997, 16.2245011788703, 14.1537434356986, 10.9230374924946, 9.84084103968408, 9.74150559673712, 9.04625341131414, 4.60131725147045, 4.38460563123126, 4.25535754319832, 3.10269023446604, 2.05794148889311, 1.96486717013323, 1.60188936055615, 1.29298898564357, 1.00882158849929, 0.668918143856383, 0.436609405898277, 0.32783186823877, -39.3010815755573 #>  #> Beginning fit attempt 9 of at maximum 10 extra tries #> Running untitled13 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072231 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 226053.29)  (10 attempt(s): 10 valid, 0 errors) #>  Start values from best fit: #> 2.17951987761656,1.81811323972771,1.44904166752005,0.604498514994528,1.29147147179014,1.17388124141934,1.30214898520524,0.898492748165293,1.13247286893006,1.2095781350104,1.91458653549528,7.40452642743505,4.99236397082348,1.32053675160167,3.15117526647134,2.17541393973224,5.01524171743309,0.08135248335329,0.120528462906145,0.466700510150328,0.590969841918841,2.30230216516881,0.731346168316912,3.52500932064948,0.353176392179849,1.41225146626662,3.32139966290673,0.448634263127453,3.71721712002252,0.164479917403726,5.46466666924916,4.25644288590711,6.56311025221454,4.45253304298167,2.97807408488281,5.05438384026312,4.7921946276716,3.55768978705078,5.13625192384593,6.1962638920508,4.04338968447061 omxGetParameters(fit) #>    ind60→x2    ind60→x3 ind60→dem60 ind60→dem65          a1           b  #>  2.17951988  1.81811324  1.44904167  0.60449851  1.29147147  1.17388124  #>          c1 dem60→dem65          a2          c2       y1↔y1       y2↔y2  #>  1.30214899  0.89849275  1.13247287  1.20957814  1.91458654  7.40452643  #>       y3↔y3       y2↔y4       y4↔y4       y2↔y6       y6↔y6       x1↔x1  #>  4.99236397  1.32053675  3.15117527  2.17541394  5.01524172  0.08135248  #>       x2↔x2       x3↔x3       y1↔y5       y5↔y5       y3↔y7       y7↔y7  #>  0.12052846  0.46670051  0.59096984  2.30230217  0.73134617  3.52500932  #>       y4↔y8       y6↔y8       y8↔y8 ind60↔ind60 dem60↔dem60 dem65↔dem65  #>  0.35317639  1.41225147  3.32139966  0.44863426  3.71721712  0.16447992  #>      one→y1      one→y2      one→y3      one→y4      one→y6      one→x1  #>  5.46466667  4.25644289  6.56311025  4.45253304  2.97807408  5.05438384  #>      one→x2      one→x3      one→y5      one→y7      one→y8  #>  4.79219463  3.55768979  5.13625192  6.19626389  4.04338968    model_transformations <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b1*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b2*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8  # create new parameters: !delta_a !delta_b  # use the model parameters and the new parameters for transformations: a2 := a1 + delta_a # let us also add an overly complicated equality constraint... delta_b := 0 b2 := b1 + delta_b '  fit <- mxsem(model = model_transformations,             data  = OpenMx::Bollen) |>   mxTryHard() #> Running untitled14 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled14 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072299 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 225901.62)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 2.17951984407634,1.81811340685296,1.44904337443961,0.604497413391578,1.29147053004612,1.17388079228451,1.30214791003184,0.898492802690816,1.20957767260774,1.91458483653931,7.40453228633693,4.9923566545658,1.32054423221716,3.15118023687071,2.17541411730628,5.01524464578276,0.0813524747091758,0.120528485425731,0.466700565462053,0.590968755924265,2.30230256273892,0.731337655517274,3.52500519819621,0.353173133030646,1.41225251907597,3.32139825769739,0.44863433658843,3.71722664371852,0.164477682099585,5.4646671603476,4.25644425036504,6.56311186705844,4.45253473015625,2.97807462251358,5.05438415281628,4.79219523361322,3.55769030593163,5.13625333840309,6.19626635643225,4.0433903830526,-0.158997989840184 omxGetParameters(fit) #>    ind60→x2    ind60→x3 ind60→dem60 ind60→dem65          a1          b1  #>  2.17951984  1.81811341  1.44904337  0.60449741  1.29147053  1.17388079  #>          c1 dem60→dem65          c2       y1↔y1       y2↔y2       y3↔y3  #>  1.30214791  0.89849280  1.20957767  1.91458484  7.40453229  4.99235665  #>       y2↔y4       y4↔y4       y2↔y6       y6↔y6       x1↔x1       x2↔x2  #>  1.32054423  3.15118024  2.17541412  5.01524465  0.08135247  0.12052849  #>       x3↔x3       y1↔y5       y5↔y5       y3↔y7       y7↔y7       y4↔y8  #>  0.46670057  0.59096876  2.30230256  0.73133766  3.52500520  0.35317313  #>       y6↔y8       y8↔y8 ind60↔ind60 dem60↔dem60 dem65↔dem65      one→y1  #>  1.41225252  3.32139826  0.44863434  3.71722664  0.16447768  5.46466716  #>      one→y2      one→y3      one→y4      one→y6      one→x1      one→x2  #>  4.25644425  6.56311187  4.45253473  2.97807462  5.05438415  4.79219523  #>      one→x3      one→y5      one→y7      one→y8     delta_a  #>  3.55769031  5.13625334  6.19626636  4.04339038 -0.15899799"},{"path":"/reference/mxsem_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"mxsem_group_by — mxsem_group_by","title":"mxsem_group_by — mxsem_group_by","text":"creates multi-group model OpenMx model.","code":""},{"path":"/reference/mxsem_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mxsem_group_by — mxsem_group_by","text":"","code":"mxsem_group_by(   mxModel,   grouping_variables,   parameters = c(\".*\"),   use_grepl = TRUE )"},{"path":"/reference/mxsem_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mxsem_group_by — mxsem_group_by","text":"mxModel mxModel entire data grouping_variables Variables used split data groups parameters parameters group specific. default parameters group specific. use_grepl set TRUE, grepl used check parameters group specific. instance, parameters = \"\" use_grepl = TRUE, parameters whose label contains letter \"\" group specific. use_grep = FALSE parameter label \"\" group specific.","code":""},{"path":"/reference/mxsem_group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mxsem_group_by — mxsem_group_by","text":"mxModel multiple groups. Use get_groups extract groups","code":""},{"path":"/reference/mxsem_group_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mxsem_group_by — mxsem_group_by","text":"mxsem_group_by creates multi-group model splitting data found mxModel object using dplyr's group_by function. general idea follows: 1. function extracts data mxModel 2. data split using group_by function dplyr variables grouping_variables 3. separate model set group. parameters match specified parameters argument group specific **Warning**: multi-group model may differ **lavaan**! instance, **lavaan** automatically set latent variances first group free loadings fixed equality. automatic procedures yet implemented **mxsem**.","code":""},{"path":"/reference/mxsem_group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mxsem_group_by — mxsem_group_by","text":"","code":"# THE FOLLOWING EXAMPLE IS ADAPTED FROM # https://openmx.ssri.psu.edu/docs/OpenMx/latest/_static/Rdoc/mxModel.html library(mxsem)  model <- 'spatial =~ visual + cubes + paper           verbal  =~ general + paragrap + sentence           math    =~ numeric + series + arithmet'  mg_model <- mxsem(model = model,                   data  = OpenMx::HS.ability.data) |>   # we want separate models for all combinations of grades and schools:   mxsem_group_by(grouping_variables = \"school\") |>   mxTryHard() #> Warning: This function is very experimental and may not yet work properly. Use with caution. #> The following parameters will be the same across groups:  #> The following parameters will be group specific: spatial→cubes, spatial→paper, verbal→paragrap, verbal→sentence, math→series, math→arithmet, visual↔visual, cubes↔cubes, paper↔paper, general↔general, paragrap↔paragrap, sentence↔sentence, numeric↔numeric, series↔series, arithmet↔arithmet, spatial↔spatial, spatial↔verbal, verbal↔verbal, spatial↔math, verbal↔math, math↔math, one→visual, one→cubes, one→paper, one→general, one→paragrap, one→sentence, one→numeric, one→series, one→arithmet #> Running untitled27 with 60 parameters #>  #> Beginning initial fit attempt #> Running untitled27 with 60 parameters #>  #>  Lowest minimum so far:  15915.8948628543 #>  OpenMx status code 6 not in list of acceptable status codes, (0,0) #>  #> Beginning fit attempt 1 of at maximum 10 extra tries #> Running untitled27 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919985549 #>  Not all eigenvalues of the Hessian are positive: 2881324677.33359, 36009.3516286094, 12023.6703681719, 5729.48946656132, 4937.78018906414, 1953.20743294049, 1890.59548458872, 1141.93768709214, 787.053832922359, 354.299869949574, 310.059988684748, 140.308070837012, 71.960524679851, 69.7737543984885, 46.2892558097408, 44.9970707911168, 41.9999858871418, 24.9093324641401, 23.5191899890895, 22.8577228952339, 20.9223694392101, 18.3025744933685, 16.0851747896718, 16.018845743146, 15.310385828649, 9.90808200029694, 8.45369857439435, 5.88962751326757, 5.53488330138983, 4.35940260488893, 4.18490800861019, 3.49096374055486, 3.16683866275163, 2.82736036010931, 1.59910088820855, 1.51503506990849, 1.43956890190422, 1.15853458220828, 1.05434253829188, 0.740020523034631, 0.518708350463338, 0.502847939424892, 0.492307464631392, 0.411213793573148, 0.327917491475641, 0.240774010995978, 0.184333452645261, 0.150707405584368, 0.0854720418961566, 0.0836640606223451, 0.0414555910630677, 0.0385806931620717, 0.0370749105068254, 0.0339971038622095, 0.0295537215170684, 0.021067635452236, 0.00785326267622024, 0.00757395103844831, 0.00250913156290403, -1.55655451604865e-06 #>  #> Beginning fit attempt 2 of at maximum 10 extra tries #> Running untitled27 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919074347 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=15915.892 (started at 11279122)  (3 attempt(s): 3 valid, 0 errors) #>  Start values from best fit: #> 0.429696324732396,0.286024397585417,0.312259740235881,0.442363859837346,2.27691771976176,0.956883492242165,23.8894216200827,15.2682075393357,5.97877715105563,55.1488164616464,3.53184435633436,5.84673040324623,14.0527084575859,39.6645663103217,13.6972693242364,23.5809085727407,25.1619866544482,79.8223569879943,12.1068191452977,18.9621175559387,9.13346418813602,29.5793258731495,24.7999951477868,14.3034555329686,44.8483120475232,9.9517398564783,18.8482871851452,14.4551793966412,18.751732741285,25.8276029806873,0.318407659498922,0.222407964517981,0.302368730073987,0.479270268445379,-464.258471510988,-133.869634378721,17.4577160519638,20.7378606419435,6.4239542394658,48.039286873544,3.66215052845238,6.6871834935806,19.4772292706673,12.4486942624279,13.7506093409822,32.7899172753595,25.3475083356719,89.8901007982516,-0.0678139344851871,-0.0855209149857523,0.00030325245185672,29.6474204666946,23.9358983573264,14.1602534807989,36.6986412140479,8.46793193567707,15.9807408169199,13.8910283708663,17.5448422432478,22.7692116297089  # let's summarize the results: summarize_multi_group_model(mg_model) #>  #>  #> -------------------------------------------------------------------------------- #> Common Parameters: #>  [1] name      matrix    row       col       Estimate  Std.Error lbound    #>  [8] ubound    lboundMet uboundMet #> <0 rows> (or 0-length row.names) #> -------------------------------------------------------------------------------- #> group_1: #> # A tibble: 1 × 1 #>   school      #>   <fct>       #> 1 Grant-White #>  #>                         name               matrix      row      col   Estimate #> 1      spatial→cubes_group_1 untitled27_group_1.A    cubes  spatial  0.4296963 #> 2      spatial→paper_group_1 untitled27_group_1.A    paper  spatial  0.2860244 #> 3    verbal→paragrap_group_1 untitled27_group_1.A paragrap   verbal  0.3122597 #> 4    verbal→sentence_group_1 untitled27_group_1.A sentence   verbal  0.4423639 #> 5        math→series_group_1 untitled27_group_1.A   series     math  2.2769177 #> 6      math→arithmet_group_1 untitled27_group_1.A arithmet     math  0.9568835 #> 7      visual↔visual_group_1 untitled27_group_1.S   visual   visual 23.8894216 #> 8        cubes↔cubes_group_1 untitled27_group_1.S    cubes    cubes 15.2682075 #> 9        paper↔paper_group_1 untitled27_group_1.S    paper    paper  5.9787772 #> 10   general↔general_group_1 untitled27_group_1.S  general  general 55.1488165 #> 11 paragrap↔paragrap_group_1 untitled27_group_1.S paragrap paragrap  3.5318444 #> 12 sentence↔sentence_group_1 untitled27_group_1.S sentence sentence  5.8467304 #> 13   numeric↔numeric_group_1 untitled27_group_1.S  numeric  numeric 14.0527085 #> 14     series↔series_group_1 untitled27_group_1.S   series   series 39.6645663 #> 15 arithmet↔arithmet_group_1 untitled27_group_1.S arithmet arithmet 13.6972693 #> 16   spatial↔spatial_group_1 untitled27_group_1.S  spatial  spatial 23.5809086 #> 17    spatial↔verbal_group_1 untitled27_group_1.S  spatial   verbal 25.1619867 #> 18     verbal↔verbal_group_1 untitled27_group_1.S   verbal   verbal 79.8223570 #> 19      spatial↔math_group_1 untitled27_group_1.S  spatial     math 12.1068191 #> 20       verbal↔math_group_1 untitled27_group_1.S   verbal     math 18.9621176 #> 21         math↔math_group_1 untitled27_group_1.S     math     math  9.1334642 #> 22        one→visual_group_1 untitled27_group_1.M        1   visual 29.5793259 #> 23         one→cubes_group_1 untitled27_group_1.M        1    cubes 24.7999951 #> 24         one→paper_group_1 untitled27_group_1.M        1    paper 14.3034555 #> 25       one→general_group_1 untitled27_group_1.M        1  general 44.8483120 #> 26      one→paragrap_group_1 untitled27_group_1.M        1 paragrap  9.9517399 #> 27      one→sentence_group_1 untitled27_group_1.M        1 sentence 18.8482872 #> 28       one→numeric_group_1 untitled27_group_1.M        1  numeric 14.4551794 #> 29        one→series_group_1 untitled27_group_1.M        1   series 18.7517327 #> 30      one→arithmet_group_1 untitled27_group_1.M        1 arithmet 25.8276030 #>     Std.Error lbound ubound lboundMet uboundMet #> 1  24.9037882     NA     NA     FALSE     FALSE #> 2  39.6622211     NA     NA     FALSE     FALSE #> 3  93.4253200     NA     NA     FALSE     FALSE #> 4  70.1639596     NA     NA     FALSE     FALSE #> 5   9.3352733     NA     NA     FALSE     FALSE #> 6  16.7201928     NA     NA     FALSE     FALSE #> 7   0.5212566  1e-06     NA     FALSE     FALSE #> 8   1.0288039  1e-06     NA     FALSE     FALSE #> 9   2.5980818  1e-06     NA     FALSE     FALSE #> 10  0.2523914  1e-06     NA     FALSE     FALSE #> 11  3.4804341  1e-06     NA     FALSE     FALSE #> 12  1.9305246  1e-06     NA     FALSE     FALSE #> 13  1.0515824  1e-06     NA     FALSE     FALSE #> 14  0.3250416  1e-06     NA     FALSE     FALSE #> 15  1.0888323  1e-06     NA     FALSE     FALSE #> 16  0.6516031  1e-06     NA     FALSE     FALSE #> 17  0.6049615     NA     NA     FALSE     FALSE #> 18  0.2724801  1e-06     NA     FALSE     FALSE #> 19  1.8694247     NA     NA     FALSE     FALSE #> 20  1.2120947     NA     NA     FALSE     FALSE #> 21  2.2905729  1e-06     NA     FALSE     FALSE #> 22  4.2133898     NA     NA     FALSE     FALSE #> 23  5.9192583     NA     NA     FALSE     FALSE #> 24  9.4067036     NA     NA     FALSE     FALSE #> 25  2.9318542     NA     NA     FALSE     FALSE #> 26 10.8878455     NA     NA     FALSE     FALSE #> 27  8.1087416     NA     NA     FALSE     FALSE #> 28  5.9844863     NA     NA     FALSE     FALSE #> 29  3.3271878     NA     NA     FALSE     FALSE #> 30  6.0895770     NA     NA     FALSE     FALSE #> -------------------------------------------------------------------------------- #> group_2: #> # A tibble: 1 × 1 #>   school  #>   <fct>   #> 1 Pasteur #>  #>                         name               matrix      row      col #> 31     spatial→cubes_group_2 untitled27_group_2.A    cubes  spatial #> 32     spatial→paper_group_2 untitled27_group_2.A    paper  spatial #> 33   verbal→paragrap_group_2 untitled27_group_2.A paragrap   verbal #> 34   verbal→sentence_group_2 untitled27_group_2.A sentence   verbal #> 35       math→series_group_2 untitled27_group_2.A   series     math #> 36     math→arithmet_group_2 untitled27_group_2.A arithmet     math #> 37     visual↔visual_group_2 untitled27_group_2.S   visual   visual #> 38       cubes↔cubes_group_2 untitled27_group_2.S    cubes    cubes #> 39       paper↔paper_group_2 untitled27_group_2.S    paper    paper #> 40   general↔general_group_2 untitled27_group_2.S  general  general #> 41 paragrap↔paragrap_group_2 untitled27_group_2.S paragrap paragrap #> 42 sentence↔sentence_group_2 untitled27_group_2.S sentence sentence #> 43   numeric↔numeric_group_2 untitled27_group_2.S  numeric  numeric #> 44     series↔series_group_2 untitled27_group_2.S   series   series #> 45 arithmet↔arithmet_group_2 untitled27_group_2.S arithmet arithmet #> 46   spatial↔spatial_group_2 untitled27_group_2.S  spatial  spatial #> 47    spatial↔verbal_group_2 untitled27_group_2.S  spatial   verbal #> 48     verbal↔verbal_group_2 untitled27_group_2.S   verbal   verbal #> 49      spatial↔math_group_2 untitled27_group_2.S  spatial     math #> 50       verbal↔math_group_2 untitled27_group_2.S   verbal     math #> 51         math↔math_group_2 untitled27_group_2.S     math     math #> 52        one→visual_group_2 untitled27_group_2.M        1   visual #> 53         one→cubes_group_2 untitled27_group_2.M        1    cubes #> 54         one→paper_group_2 untitled27_group_2.M        1    paper #> 55       one→general_group_2 untitled27_group_2.M        1  general #> 56      one→paragrap_group_2 untitled27_group_2.M        1 paragrap #> 57      one→sentence_group_2 untitled27_group_2.M        1 sentence #> 58       one→numeric_group_2 untitled27_group_2.M        1  numeric #> 59        one→series_group_2 untitled27_group_2.M        1   series #> 60      one→arithmet_group_2 untitled27_group_2.M        1 arithmet #>         Estimate    Std.Error lbound ubound lboundMet uboundMet #> 31  3.184077e-01 2.685600e+01     NA     NA     FALSE     FALSE #> 32  2.224080e-01 4.787092e+01     NA     NA     FALSE     FALSE #> 33  3.023687e-01 1.021691e+02     NA     NA     FALSE     FALSE #> 34  4.792703e-01 7.129261e+01     NA     NA     FALSE     FALSE #> 35 -4.642585e+02 7.225536e-02     NA     NA     FALSE     FALSE #> 36 -1.338696e+02 1.064656e-01     NA     NA     FALSE     FALSE #> 37  1.745772e+01 5.399522e-01  1e-06     NA     FALSE     FALSE #> 38  2.073786e+01 8.178606e-01  1e-06     NA     FALSE     FALSE #> 39  6.423954e+00 2.577448e+00  1e-06     NA     FALSE     FALSE #> 40  4.803929e+01 2.871769e-01  1e-06     NA     FALSE     FALSE #> 41  3.662151e+00 3.556516e+00  1e-06     NA     FALSE     FALSE #> 42  6.687183e+00 1.687191e+00  1e-06     NA     FALSE     FALSE #> 43  1.947723e+01 9.069229e-01  1e-06     NA     FALSE     FALSE #> 44  1.244869e+01 4.049034e-01  1e-06     NA     FALSE     FALSE #> 45  1.375061e+01 1.215510e+00  1e-06     NA     FALSE     FALSE #> 46  3.278992e+01 5.320073e-01  1e-06     NA     FALSE     FALSE #> 47  2.534751e+01 4.935328e-01     NA     NA     FALSE     FALSE #> 48  8.989010e+01 2.223162e-01  1e-06     NA     FALSE     FALSE #> 49 -6.781393e-02 3.098339e+02     NA     NA     FALSE     FALSE #> 50 -8.552091e-02 1.932178e+02     NA     NA     FALSE     FALSE #> 51  3.032525e-04 7.601277e+04  1e-06     NA      TRUE     FALSE #> 52  2.964742e+01 4.366879e+00     NA     NA     FALSE     FALSE #> 53  2.393590e+01 5.375123e+00     NA     NA     FALSE     FALSE #> 54  1.416025e+01 9.541766e+00     NA     NA     FALSE     FALSE #> 55  3.669864e+01 3.185122e+00     NA     NA     FALSE     FALSE #> 56  8.467932e+00 1.120904e+01     NA     NA     FALSE     FALSE #> 57  1.598074e+01 7.719790e+00     NA     NA     FALSE     FALSE #> 58  1.389103e+01 5.660159e+00     NA     NA     FALSE     FALSE #> 59  1.754484e+01 3.780316e+00     NA     NA     FALSE     FALSE #> 60  2.276921e+01 6.552695e+00     NA     NA     FALSE     FALSE #>  #> --------------------------------------------------------------------------------"},{"path":"/reference/parameter_table_rcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"parameter_table_rcpp — parameter_table_rcpp","title":"parameter_table_rcpp — parameter_table_rcpp","text":"creates parameter table lavaan like syntax","code":""},{"path":"/reference/parameter_table_rcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameter_table_rcpp — parameter_table_rcpp","text":"","code":"parameter_table_rcpp(   syntax,   add_intercept,   add_variance,   add_exogenous_latent_covariances,   add_exogenous_manifest_covariances,   scale_latent_variance,   scale_loading )"},{"path":"/reference/parameter_table_rcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameter_table_rcpp — parameter_table_rcpp","text":"syntax lavaan like syntax add_intercept intercepts manifest variables automatically added? add_variance variances variables automatically added? add_exogenous_latent_covariances covariances exogenous latent variables added automatically? add_exogenous_manifest_covariances covariances exogenous manifest variables added automatically? scale_latent_variance variances latent variables set 1? scale_loading first loading latent variable set 1?","code":""},{"path":"/reference/parameter_table_rcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parameter_table_rcpp — parameter_table_rcpp","text":"parameter table","code":""},{"path":"/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"parameters — parameters","title":"parameters — parameters","text":"Returns parameter estimates mxModel. Wrapper omxGetParameters","code":""},{"path":"/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameters — parameters","text":"","code":"parameters(mxMod)"},{"path":"/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameters — parameters","text":"mxMod mxModel object","code":""},{"path":"/reference/parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parameters — parameters","text":"vector parameter estimates","code":""},{"path":"/reference/print.multi_group_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"print the multi_group_parameters — print.multi_group_parameters","title":"print the multi_group_parameters — print.multi_group_parameters","text":"print multi_group_parameters","code":""},{"path":"/reference/print.multi_group_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print the multi_group_parameters — print.multi_group_parameters","text":"","code":"# S3 method for multi_group_parameters print(x, ...)"},{"path":"/reference/print.multi_group_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print the multi_group_parameters — print.multi_group_parameters","text":"x object summarize_multi_group_model ... used","code":""},{"path":"/reference/set_starting_values.html","id":null,"dir":"Reference","previous_headings":"","what":"set_starting_values — set_starting_values","title":"set_starting_values — set_starting_values","text":"set starting values OpenMx model. just interface omxSetParameters.","code":""},{"path":"/reference/set_starting_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_starting_values — set_starting_values","text":"","code":"set_starting_values(mx_model, values)"},{"path":"/reference/set_starting_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set_starting_values — set_starting_values","text":"mx_model model class mxModel values vector labeled parameter values","code":""},{"path":"/reference/set_starting_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set_starting_values — set_starting_values","text":"mxModel changed parameter values","code":""},{"path":"/reference/set_starting_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set_starting_values — set_starting_values","text":"","code":"library(mxsem)  model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  fit <- mxsem(model = model,             data  = OpenMx::Bollen) |>   set_starting_values(values = c(\"a1\" = .4, \"c1\" = .6)) |>   mxTryHard() #> Running untitled28 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled28 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072475 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 202112.01)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 2.17952142421396,1.81811449442899,1.44903740720572,0.604498693309258,1.29147096822703,1.17388208301856,1.30214999693199,0.898493763177232,1.13247199956342,1.20957837863077,1.91459018198726,7.40453312928007,4.99236733399026,1.32054414980387,3.15118382088363,2.17542679780441,5.01525888074993,0.0813526327470859,0.120527833849311,0.466700257730178,0.590968179014808,2.30230658725455,0.731342825026383,3.52501807901326,0.353173835718305,1.41225888440565,3.32140416154319,0.448634125623381,3.71721299421255,0.16447324637068,5.46466760046792,4.25644258418424,6.56311270860545,4.45253410440467,2.97807536247999,5.05438371581116,4.79219439516082,3.5576890885128,5.13625275652584,6.19626686559767,4.04339176339156"},{"path":"/reference/simulate_latent_growth_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_latent_growth_curve — simulate_latent_growth_curve","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"simulate data latent growth curve model five measurement occasions. time-distance occasions differs subjects.","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"","code":"simulate_latent_growth_curve(N = 100)"},{"path":"/reference/simulate_latent_growth_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"N sample size","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"data set columns y1-y5 (observations) t_1-t_5 (time observation)","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"","code":"set.seed(123) dataset <- simulate_latent_growth_curve(N = 100)  model <- \"   I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5   S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5    I ~ int*1   S ~ slp*1    # set intercepts of manifest variables to zero   y1 ~ 0*1; y2 ~ 0*1; y3 ~ 0*1; y4 ~ 0*1; y5 ~ 0*1;   \"  mod <- mxsem(model = model,              data = dataset) |>   mxTryHard() #> Skipping the automatic scaling of I. The variable was already scaled manually (e.g., eta =~ 1*y1 + ...). #> Warning: Automatically scaling latent variable S failed. Could not find an unlabeled free loading on observed items. Did you give labels to all loadings? If so, remove the label for one of the items or manually set one of the loadings to a fixed value (e.g., eta =~ 1*y1 + ...). #> Running untitled29 with 10 parameters #>  #> Beginning initial fit attempt #> Running untitled29 with 10 parameters #>  #>  Lowest minimum so far:  860.891632385377 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=860.89163 (started at 2725.1683)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 0.024864350436888,0.0537583562803673,0.0362117929126171,0.0523549171097821,0.0292053383787375,0.85025530119423,-0.0297817514055883,0.928423391801049,1.09511498540101,0.290548817833504"},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"simulate data moderated nonlinear factor analysis.","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"","code":"simulate_moderated_nonlinear_factor_analysis(N)"},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"N sample size","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"data set variables x1-x3 y1-y3 representing repeated measurements affect measure. assumed autoregressive effect different depending covariate k","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"","code":"library(mxsem) set.seed(123) dataset <- simulate_moderated_nonlinear_factor_analysis(N = 2000)  model <- \" xi =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 eta ~ a*xi  # we need two new parameters: a0 and a1. These are created as follows: !a0 !a1 # Now, we redefine a to be a0 + k*a1, where k is found in the data a := a0 + data.k*a1 \"  mod <- mxsem(model = model,              data = dataset) |>   mxTryHard() #> Running untitled30 with 20 parameters #>  #> Beginning initial fit attempt #> Running untitled30 with 20 parameters #>  #>  Lowest minimum so far:  9354.67567512738 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=9354.6757 (started at 63250.836)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 0.798644787140878,0.907904236613599,0.803838142013948,0.900396358534138,0.0423202738274926,0.0419256359832653,0.0370993849926502,0.0410547496618837,0.041974968940025,0.0377186342526869,0.983486182403335,0.248565838931859,0.0132141364668449,0.00300610847335311,0.0101745706855508,-0.00432472158982143,-0.00060509160768298,-0.00278202909173598,0.679955375785379,-0.172459318949147  omxGetParameters(mod) #>         xi→x2         xi→x3        eta→y2        eta→y3         x1↔x1  #>  0.7986447871  0.9079042366  0.8038381420  0.9003963585  0.0423202738  #>         x2↔x2         x3↔x3         y1↔y1         y2↔y2         y3↔y3  #>  0.0419256360  0.0370993850  0.0410547497  0.0419749689  0.0377186343  #>         xi↔xi       eta↔eta        one→x1        one→x2        one→x3  #>  0.9834861824  0.2485658389  0.0132141365  0.0030061085  0.0101745707  #>        one→y1        one→y2        one→y3            a0            a1  #> -0.0043247216 -0.0006050916 -0.0027820291  0.6799553758 -0.1724593189"},{"path":"/reference/split_string_all.html","id":null,"dir":"Reference","previous_headings":"","what":"split_string_all — split_string_all","title":"split_string_all — split_string_all","text":"splits string","code":""},{"path":"/reference/split_string_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split_string_all — split_string_all","text":"","code":"split_string_all(str, at)"},{"path":"/reference/split_string_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split_string_all — split_string_all","text":"str string splitted split string ","code":""},{"path":"/reference/split_string_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split_string_all — split_string_all","text":"vector strings","code":""},{"path":"/reference/summarize_multi_group_model.html","id":null,"dir":"Reference","previous_headings":"","what":"summarize_multi_group_model — summarize_multi_group_model","title":"summarize_multi_group_model — summarize_multi_group_model","text":"summarize results multi group model created mxsem_group_by","code":""},{"path":"/reference/summarize_multi_group_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarize_multi_group_model — summarize_multi_group_model","text":"","code":"summarize_multi_group_model(multi_group_model)"},{"path":"/reference/summarize_multi_group_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarize_multi_group_model — summarize_multi_group_model","text":"multi_group_model multi group model created mxsem_group_by","code":""},{"path":"/reference/summarize_multi_group_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summarize_multi_group_model — summarize_multi_group_model","text":"list goup specific parameters common parameters","code":""},{"path":"/reference/summarize_multi_group_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summarize_multi_group_model — summarize_multi_group_model","text":"","code":"# THE FOLLOWING EXAMPLE IS ADAPTED FROM # https://openmx.ssri.psu.edu/docs/OpenMx/latest/_static/Rdoc/mxModel.html library(mxsem)  model <- 'spatial =~ visual + cubes + paper           verbal  =~ general + paragrap + sentence           math    =~ numeric + series + arithmet'  mg_model <- mxsem(model = model,                   data  = OpenMx::HS.ability.data) |>   # we want separate models for all combinations of grades and schools:   mxsem_group_by(grouping_variables = \"school\") |>   mxTryHard() #> Warning: This function is very experimental and may not yet work properly. Use with caution. #> The following parameters will be the same across groups:  #> The following parameters will be group specific: spatial→cubes, spatial→paper, verbal→paragrap, verbal→sentence, math→series, math→arithmet, visual↔visual, cubes↔cubes, paper↔paper, general↔general, paragrap↔paragrap, sentence↔sentence, numeric↔numeric, series↔series, arithmet↔arithmet, spatial↔spatial, spatial↔verbal, verbal↔verbal, spatial↔math, verbal↔math, math↔math, one→visual, one→cubes, one→paper, one→general, one→paragrap, one→sentence, one→numeric, one→series, one→arithmet #> Running untitled40 with 60 parameters #>  #> Beginning initial fit attempt #> Running untitled40 with 60 parameters #>  #>  Lowest minimum so far:  15915.8948628543 #>  OpenMx status code 6 not in list of acceptable status codes, (0,0) #>  #> Beginning fit attempt 1 of at maximum 10 extra tries #> Running untitled40 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919985549 #>  Not all eigenvalues of the Hessian are positive: 2881324677.33359, 36009.3516286094, 12023.6703681719, 5729.48946656132, 4937.78018906414, 1953.20743294049, 1890.59548458872, 1141.93768709214, 787.053832922359, 354.299869949574, 310.059988684748, 140.308070837012, 71.960524679851, 69.7737543984885, 46.2892558097408, 44.9970707911168, 41.9999858871418, 24.9093324641401, 23.5191899890895, 22.8577228952339, 20.9223694392101, 18.3025744933685, 16.0851747896718, 16.018845743146, 15.310385828649, 9.90808200029694, 8.45369857439435, 5.88962751326757, 5.53488330138983, 4.35940260488893, 4.18490800861019, 3.49096374055486, 3.16683866275163, 2.82736036010931, 1.59910088820855, 1.51503506990849, 1.43956890190422, 1.15853458220828, 1.05434253829188, 0.740020523034631, 0.518708350463338, 0.502847939424892, 0.492307464631392, 0.411213793573148, 0.327917491475641, 0.240774010995978, 0.184333452645261, 0.150707405584368, 0.0854720418961566, 0.0836640606223451, 0.0414555910630677, 0.0385806931620717, 0.0370749105068254, 0.0339971038622095, 0.0295537215170684, 0.021067635452236, 0.00785326267622024, 0.00757395103844831, 0.00250913156290403, -1.55655451604865e-06 #>  #> Beginning fit attempt 2 of at maximum 10 extra tries #> Running untitled40 with 60 parameters #>  #>  Lowest minimum so far:  15915.8919074347 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=15915.892 (started at 11279122)  (3 attempt(s): 3 valid, 0 errors) #>  Start values from best fit: #> 0.429696324732396,0.286024397585417,0.312259740235881,0.442363859837346,2.27691771976176,0.956883492242165,23.8894216200827,15.2682075393357,5.97877715105563,55.1488164616464,3.53184435633436,5.84673040324623,14.0527084575859,39.6645663103217,13.6972693242364,23.5809085727407,25.1619866544482,79.8223569879943,12.1068191452977,18.9621175559387,9.13346418813602,29.5793258731495,24.7999951477868,14.3034555329686,44.8483120475232,9.9517398564783,18.8482871851452,14.4551793966412,18.751732741285,25.8276029806873,0.318407659498922,0.222407964517981,0.302368730073987,0.479270268445379,-464.258471510988,-133.869634378721,17.4577160519638,20.7378606419435,6.4239542394658,48.039286873544,3.66215052845238,6.6871834935806,19.4772292706673,12.4486942624279,13.7506093409822,32.7899172753595,25.3475083356719,89.8901007982516,-0.0678139344851871,-0.0855209149857523,0.00030325245185672,29.6474204666946,23.9358983573264,14.1602534807989,36.6986412140479,8.46793193567707,15.9807408169199,13.8910283708663,17.5448422432478,22.7692116297089  # let's summarize the results: summarize_multi_group_model(mg_model) #>  #>  #> -------------------------------------------------------------------------------- #> Common Parameters: #>  [1] name      matrix    row       col       Estimate  Std.Error lbound    #>  [8] ubound    lboundMet uboundMet #> <0 rows> (or 0-length row.names) #> -------------------------------------------------------------------------------- #> group_1: #> # A tibble: 1 × 1 #>   school      #>   <fct>       #> 1 Grant-White #>  #>                         name               matrix      row      col   Estimate #> 1      spatial→cubes_group_1 untitled40_group_1.A    cubes  spatial  0.4296963 #> 2      spatial→paper_group_1 untitled40_group_1.A    paper  spatial  0.2860244 #> 3    verbal→paragrap_group_1 untitled40_group_1.A paragrap   verbal  0.3122597 #> 4    verbal→sentence_group_1 untitled40_group_1.A sentence   verbal  0.4423639 #> 5        math→series_group_1 untitled40_group_1.A   series     math  2.2769177 #> 6      math→arithmet_group_1 untitled40_group_1.A arithmet     math  0.9568835 #> 7      visual↔visual_group_1 untitled40_group_1.S   visual   visual 23.8894216 #> 8        cubes↔cubes_group_1 untitled40_group_1.S    cubes    cubes 15.2682075 #> 9        paper↔paper_group_1 untitled40_group_1.S    paper    paper  5.9787772 #> 10   general↔general_group_1 untitled40_group_1.S  general  general 55.1488165 #> 11 paragrap↔paragrap_group_1 untitled40_group_1.S paragrap paragrap  3.5318444 #> 12 sentence↔sentence_group_1 untitled40_group_1.S sentence sentence  5.8467304 #> 13   numeric↔numeric_group_1 untitled40_group_1.S  numeric  numeric 14.0527085 #> 14     series↔series_group_1 untitled40_group_1.S   series   series 39.6645663 #> 15 arithmet↔arithmet_group_1 untitled40_group_1.S arithmet arithmet 13.6972693 #> 16   spatial↔spatial_group_1 untitled40_group_1.S  spatial  spatial 23.5809086 #> 17    spatial↔verbal_group_1 untitled40_group_1.S  spatial   verbal 25.1619867 #> 18     verbal↔verbal_group_1 untitled40_group_1.S   verbal   verbal 79.8223570 #> 19      spatial↔math_group_1 untitled40_group_1.S  spatial     math 12.1068191 #> 20       verbal↔math_group_1 untitled40_group_1.S   verbal     math 18.9621176 #> 21         math↔math_group_1 untitled40_group_1.S     math     math  9.1334642 #> 22        one→visual_group_1 untitled40_group_1.M        1   visual 29.5793259 #> 23         one→cubes_group_1 untitled40_group_1.M        1    cubes 24.7999951 #> 24         one→paper_group_1 untitled40_group_1.M        1    paper 14.3034555 #> 25       one→general_group_1 untitled40_group_1.M        1  general 44.8483120 #> 26      one→paragrap_group_1 untitled40_group_1.M        1 paragrap  9.9517399 #> 27      one→sentence_group_1 untitled40_group_1.M        1 sentence 18.8482872 #> 28       one→numeric_group_1 untitled40_group_1.M        1  numeric 14.4551794 #> 29        one→series_group_1 untitled40_group_1.M        1   series 18.7517327 #> 30      one→arithmet_group_1 untitled40_group_1.M        1 arithmet 25.8276030 #>     Std.Error lbound ubound lboundMet uboundMet #> 1  24.9037882     NA     NA     FALSE     FALSE #> 2  39.6622211     NA     NA     FALSE     FALSE #> 3  93.4253200     NA     NA     FALSE     FALSE #> 4  70.1639596     NA     NA     FALSE     FALSE #> 5   9.3352733     NA     NA     FALSE     FALSE #> 6  16.7201928     NA     NA     FALSE     FALSE #> 7   0.5212566  1e-06     NA     FALSE     FALSE #> 8   1.0288039  1e-06     NA     FALSE     FALSE #> 9   2.5980818  1e-06     NA     FALSE     FALSE #> 10  0.2523914  1e-06     NA     FALSE     FALSE #> 11  3.4804341  1e-06     NA     FALSE     FALSE #> 12  1.9305246  1e-06     NA     FALSE     FALSE #> 13  1.0515824  1e-06     NA     FALSE     FALSE #> 14  0.3250416  1e-06     NA     FALSE     FALSE #> 15  1.0888323  1e-06     NA     FALSE     FALSE #> 16  0.6516031  1e-06     NA     FALSE     FALSE #> 17  0.6049615     NA     NA     FALSE     FALSE #> 18  0.2724801  1e-06     NA     FALSE     FALSE #> 19  1.8694247     NA     NA     FALSE     FALSE #> 20  1.2120947     NA     NA     FALSE     FALSE #> 21  2.2905729  1e-06     NA     FALSE     FALSE #> 22  4.2133898     NA     NA     FALSE     FALSE #> 23  5.9192583     NA     NA     FALSE     FALSE #> 24  9.4067036     NA     NA     FALSE     FALSE #> 25  2.9318542     NA     NA     FALSE     FALSE #> 26 10.8878455     NA     NA     FALSE     FALSE #> 27  8.1087416     NA     NA     FALSE     FALSE #> 28  5.9844863     NA     NA     FALSE     FALSE #> 29  3.3271878     NA     NA     FALSE     FALSE #> 30  6.0895770     NA     NA     FALSE     FALSE #> -------------------------------------------------------------------------------- #> group_2: #> # A tibble: 1 × 1 #>   school  #>   <fct>   #> 1 Pasteur #>  #>                         name               matrix      row      col #> 31     spatial→cubes_group_2 untitled40_group_2.A    cubes  spatial #> 32     spatial→paper_group_2 untitled40_group_2.A    paper  spatial #> 33   verbal→paragrap_group_2 untitled40_group_2.A paragrap   verbal #> 34   verbal→sentence_group_2 untitled40_group_2.A sentence   verbal #> 35       math→series_group_2 untitled40_group_2.A   series     math #> 36     math→arithmet_group_2 untitled40_group_2.A arithmet     math #> 37     visual↔visual_group_2 untitled40_group_2.S   visual   visual #> 38       cubes↔cubes_group_2 untitled40_group_2.S    cubes    cubes #> 39       paper↔paper_group_2 untitled40_group_2.S    paper    paper #> 40   general↔general_group_2 untitled40_group_2.S  general  general #> 41 paragrap↔paragrap_group_2 untitled40_group_2.S paragrap paragrap #> 42 sentence↔sentence_group_2 untitled40_group_2.S sentence sentence #> 43   numeric↔numeric_group_2 untitled40_group_2.S  numeric  numeric #> 44     series↔series_group_2 untitled40_group_2.S   series   series #> 45 arithmet↔arithmet_group_2 untitled40_group_2.S arithmet arithmet #> 46   spatial↔spatial_group_2 untitled40_group_2.S  spatial  spatial #> 47    spatial↔verbal_group_2 untitled40_group_2.S  spatial   verbal #> 48     verbal↔verbal_group_2 untitled40_group_2.S   verbal   verbal #> 49      spatial↔math_group_2 untitled40_group_2.S  spatial     math #> 50       verbal↔math_group_2 untitled40_group_2.S   verbal     math #> 51         math↔math_group_2 untitled40_group_2.S     math     math #> 52        one→visual_group_2 untitled40_group_2.M        1   visual #> 53         one→cubes_group_2 untitled40_group_2.M        1    cubes #> 54         one→paper_group_2 untitled40_group_2.M        1    paper #> 55       one→general_group_2 untitled40_group_2.M        1  general #> 56      one→paragrap_group_2 untitled40_group_2.M        1 paragrap #> 57      one→sentence_group_2 untitled40_group_2.M        1 sentence #> 58       one→numeric_group_2 untitled40_group_2.M        1  numeric #> 59        one→series_group_2 untitled40_group_2.M        1   series #> 60      one→arithmet_group_2 untitled40_group_2.M        1 arithmet #>         Estimate    Std.Error lbound ubound lboundMet uboundMet #> 31  3.184077e-01 2.685600e+01     NA     NA     FALSE     FALSE #> 32  2.224080e-01 4.787092e+01     NA     NA     FALSE     FALSE #> 33  3.023687e-01 1.021691e+02     NA     NA     FALSE     FALSE #> 34  4.792703e-01 7.129261e+01     NA     NA     FALSE     FALSE #> 35 -4.642585e+02 7.225536e-02     NA     NA     FALSE     FALSE #> 36 -1.338696e+02 1.064656e-01     NA     NA     FALSE     FALSE #> 37  1.745772e+01 5.399522e-01  1e-06     NA     FALSE     FALSE #> 38  2.073786e+01 8.178606e-01  1e-06     NA     FALSE     FALSE #> 39  6.423954e+00 2.577448e+00  1e-06     NA     FALSE     FALSE #> 40  4.803929e+01 2.871769e-01  1e-06     NA     FALSE     FALSE #> 41  3.662151e+00 3.556516e+00  1e-06     NA     FALSE     FALSE #> 42  6.687183e+00 1.687191e+00  1e-06     NA     FALSE     FALSE #> 43  1.947723e+01 9.069229e-01  1e-06     NA     FALSE     FALSE #> 44  1.244869e+01 4.049034e-01  1e-06     NA     FALSE     FALSE #> 45  1.375061e+01 1.215510e+00  1e-06     NA     FALSE     FALSE #> 46  3.278992e+01 5.320073e-01  1e-06     NA     FALSE     FALSE #> 47  2.534751e+01 4.935328e-01     NA     NA     FALSE     FALSE #> 48  8.989010e+01 2.223162e-01  1e-06     NA     FALSE     FALSE #> 49 -6.781393e-02 3.098339e+02     NA     NA     FALSE     FALSE #> 50 -8.552091e-02 1.932178e+02     NA     NA     FALSE     FALSE #> 51  3.032525e-04 7.601277e+04  1e-06     NA      TRUE     FALSE #> 52  2.964742e+01 4.366879e+00     NA     NA     FALSE     FALSE #> 53  2.393590e+01 5.375123e+00     NA     NA     FALSE     FALSE #> 54  1.416025e+01 9.541766e+00     NA     NA     FALSE     FALSE #> 55  3.669864e+01 3.185122e+00     NA     NA     FALSE     FALSE #> 56  8.467932e+00 1.120904e+01     NA     NA     FALSE     FALSE #> 57  1.598074e+01 7.719790e+00     NA     NA     FALSE     FALSE #> 58  1.389103e+01 5.660159e+00     NA     NA     FALSE     FALSE #> 59  1.754484e+01 3.780316e+00     NA     NA     FALSE     FALSE #> 60  2.276921e+01 6.552695e+00     NA     NA     FALSE     FALSE #>  #> --------------------------------------------------------------------------------"},{"path":"/reference/unicode_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"unicode_directed — unicode_directed","title":"unicode_directed — unicode_directed","text":"function returns unicode directed arrows","code":""},{"path":"/reference/unicode_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unicode_directed — unicode_directed","text":"","code":"unicode_directed()"},{"path":"/reference/unicode_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unicode_directed — unicode_directed","text":"returns unicode directed arrows","code":""},{"path":"/reference/unicode_undirected.html","id":null,"dir":"Reference","previous_headings":"","what":"unicode_undirected — unicode_undirected","title":"unicode_undirected — unicode_undirected","text":"function returns unicode undirected arrows","code":""},{"path":"/reference/unicode_undirected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unicode_undirected — unicode_undirected","text":"","code":"unicode_undirected()"},{"path":"/reference/unicode_undirected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unicode_undirected — unicode_undirected","text":"returns unicode undirected arrows","code":""},{"path":"/news/index.html","id":"mxsem-007","dir":"Changelog","previous_headings":"","what":"mxsem 0.0.7","title":"mxsem 0.0.7","text":"Improved algebra handling. mxsem previously failed algebras braces numeric values. fixed 0.0.7.","code":""}]
