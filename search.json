[{"path":"/articles/Syntax.html","id":"loadings-regressions-and-intercepts","dir":"Articles","previous_headings":"","what":"Loadings, Regressions, and Intercepts","title":"Syntax","text":"following specifies loadings latent variable eta manifest variables y1-y4: Regressions specified ~: Add covariances ~~ Intercepts specified ~1 Note: lavaan’s sem-function, loading first item latent variable constrained one default. Estimating loading freely requires replacing xi  =~ x1 + x2 + x3 xi  =~ NA*x1 + x2 + x3. mxsem, different approach used. calling mxsem-function set argument scale_loadings FALSE freely estimate loadings.","code":"eta =~ y1 + y2 + y3 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2  eta ~ 1"},{"path":"/articles/Syntax.html","id":"parameter-labels-and-constraints","dir":"Articles","previous_headings":"","what":"Parameter labels and constraints","title":"Syntax","text":"Add labels parameters follows: Fix parameters using numeric values instead labels:","code":"xi  =~ l1*x1 + l2*x2 + l3*x3 eta =~ l4*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi"},{"path":"/articles/Syntax.html","id":"bounds","dir":"Articles","previous_headings":"","what":"Bounds","title":"Syntax","text":"Lower upper bounds allow constraints parameters. instance, lower bound can prevent negative variances. Upper bounds specified v < 10. Note parameter label must always come first. following allowed: 0 < v 10 > v.","code":"xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi # residual variance for x1 x1 ~~ v*x1 # bound: v > 0"},{"path":"/articles/Syntax.html","id":"non-linear-constraints","dir":"Articles","previous_headings":"","what":"(Non-)linear constraints","title":"Syntax","text":"Assume latent construct eta observed twice, eta1 first observation eta2 second. want define loadings eta2 observations l_1 + delta_l1. delta_l1 zero, measurement invariance.","code":"eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ l4*y4 + l5*y5 + l6*y6 # define new delta-parameter !delta_1; !delta_2; !delta_3 # redefine l4-l6 l4 := l1 + delta_1 l5 := l2 + delta_2 l6 := l3 + delta_3"},{"path":"/articles/Syntax.html","id":"definition-variables","dir":"Articles","previous_headings":"","what":"Definition variables","title":"Syntax","text":"Definition variables allow person-specific parameter constraints. Use data.-prefix specify definition variables.","code":"I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  I ~ int*1 S ~ slp*1"},{"path":"/articles/Syntax.html","id":"starting-values","dir":"Articles","previous_headings":"","what":"Starting Values","title":"Syntax","text":"mxsem differs lavaan specification starting values. Instead providing starting values model syntax, set_starting_values function used.","code":""},{"path":"/articles/Syntax.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Syntax","text":"Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jannik H. Orzek. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orzek J (2023). mxsem: Parse lavaan-like syntax OpenMx models. R package version 0.0.1, https://jhorzek.github.io/mxsem/.","code":"@Manual{,   title = {mxsem: Parse lavaan-like syntax for OpenMx models},   author = {Jannik H. Orzek},   year = {2023},   note = {R package version 0.0.1},   url = {https://jhorzek.github.io/mxsem/}, }"},{"path":"/index.html","id":"mxsem","dir":"","previous_headings":"","what":"Parse lavaan-like syntax for OpenMx models","title":"Parse lavaan-like syntax for OpenMx models","text":"mxsem provides lavaan-like (Rosseel, 2012) syntax implement structural equation models (SEM) OpenMx (Boker et al., 2011). objective simplify fitting basic SEM OpenMx allow users easily switch lavaan OpenMx. latter can useful one two packages reports non-convergence issues. Additionally, mxsem allows parameter transformations definition variables. However, mxsem intentionally incomplete order focus simplicity. want unlock full potential OpenMx, mxsem may best option. Warning: syntax settings mxsem may differ lavaan cases. See vignette(\"Syntax\", package = \"mxsem\") details syntax default arguments.","code":""},{"path":"/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Parse lavaan-like syntax for OpenMx models","text":"mxsem new may still sharp edges. Fortunately, packages also try simplify implementing OpenMx models. may consider following: tidySEM provides unified syntax specify , lavaan OpenMx models. Additionally, works well tidyverse. ezMx simplifies fitting SEM OpenMx also provides translation lavaan models OpenMx lavaan..OpenMx function.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parse lavaan-like syntax for OpenMx models","text":"newest version package can installed GitHub using following commands R:","code":"if(!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"jhorzek/mxsem\",                           ref = \"main\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Parse lavaan-like syntax for OpenMx models","text":"following example directly adapted lavaan:","code":"library(mxsem) model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  mxsem(model = model,       data  = OpenMx::Bollen) |>   mxTryHard() |>   summary() #> Summary of untitled2  #>   #> free parameters: #>           name matrix   row   col   Estimate  Std.Error A lbound ubound #> 1     ind60→x2      A    x2 ind60 2.17951969 0.13890273                 #> 2     ind60→x3      A    x3 ind60 1.81811337 0.15211751                 #> 3  ind60→dem60      A dem60 ind60 1.44904273 0.38544855                 #> 4  ind60→dem65      A dem65 ind60 0.60449854 0.24058577                 #> 5           a1      A    y2 dem60 1.29147133 0.19273354                 #> 6            b      A    y3 dem60 1.17388110 0.11991187                 #> 7           c1      A    y4 dem60 1.30214922 0.15716825                 #> 8  dem60→dem65      A dem65 dem60 0.89849281 0.09209863                 #> 9           a2      A    y6 dem65 1.13247238 0.15405101                 #> 10          c2      A    y8 dem65 1.20957807 0.14443543                 #> 11       y1↔y1      S    y1    y1 1.91458549 0.46801012    1e-06        #> 12       y2↔y2      S    y2    y2 7.40452888 1.34562916    1e-06        #> 13       y3↔y3      S    y3    y3 4.99236808 0.96375021    1e-06        #> 14       y2↔y4      S    y2    y4 1.32053478 0.69918534                 #> 15       y4↔y4      S    y4    y4 3.15117584 0.75521995    1e-06        #> 16       y2↔y6      S    y2    y6 2.17541773 0.72882998                 #> 17       y6↔y6      S    y6    y6 5.01524082 0.89773033    1e-06        #> 18       x1↔x1      S    x1    x1 0.08135247 0.01970040    1e-06        #> 19       x2↔x2      S    x2    x2 0.12052866 0.06990806    1e-06        #> 20       x3↔x3      S    x3    x3 0.46670049 0.08911867    1e-06        #> 21       y1↔y5      S    y1    y5 0.59097044 0.36679629                 #> 22       y5↔y5      S    y5    y5 2.30230244 0.48307628    1e-06        #> 23       y3↔y7      S    y3    y7 0.73134993 0.62154873                 #> 24       y7↔y7      S    y7    y7 3.52500940 0.73477059    1e-06        #> 25       y4↔y8      S    y4    y8 0.35317926 0.45974116                 #> 26       y6↔y8      S    y6    y8 1.41224936 0.57574745                 #> 27       y8↔y8      S    y8    y8 3.32140113 0.71106484    1e-06        #> 28 ind60↔ind60      S ind60 ind60 0.44863429 0.08674943    1e-06        #> 29 dem60↔dem60      S dem60 dem60 3.71721943 0.89611392    1e-06        #> 30 dem65↔dem65      S dem65 dem65 0.16448130 0.23830932    1e-06        #> 31      one→y1      M     1    y1 5.46466715 0.29605013                 #> 32      one→y2      M     1    y2 4.25644263 0.44981119                 #> 33      one→y3      M     1    y3 6.56311026 0.39007812                 #> 34      one→y4      M     1    y4 4.45253310 0.38385079                 #> 35      one→y6      M     1    y6 2.97807431 0.38583489                 #> 36      one→x1      M     1    x1 5.05438392 0.08406042                 #> 37      one→x2      M     1    x2 4.79219470 0.17326513                 #> 38      one→x3      M     1    x3 3.55768986 0.16122804                 #> 39      one→y5      M     1    y5 5.13625262 0.30762959                 #> 40      one→y7      M     1    y7 6.19626397 0.36757001                 #> 41      one→y8      M     1    y8 4.04339020 0.37125831                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             41                    784              3096.945 #>    Saturated:             77                    748                    NA #> Independence:             22                    803                    NA #> Number of observations/statistics: 75/825 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      1528.9445               3178.945                 3283.308 #> BIC:      -287.9662               3273.962                 3144.740 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-07-26 12:38:44  #> Wall clock time: 0.2889161 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"adding-bounds","dir":"","previous_headings":"","what":"Adding bounds","title":"Parse lavaan-like syntax for OpenMx models","text":"Lower upper bounds can added parameters model. following demonstrates bounds loading: mxsem adds lower bounds variances default. remove lower bounds, set lbound_variances = FALSE calling mxsem().","code":"library(mxsem) model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8         # lower bound on a1      a1 > 0   # upper bound on a2      a2 < 10.123 '  mxsem(model = model,       data  = OpenMx::Bollen,        # use latent variances to scale the model       scale_loadings = FALSE,        scale_latent_variances = TRUE) |>   mxTryHard() |>   summary() #> Summary of untitled4  #>   #> free parameters: #>           name matrix   row   col    Estimate  Std.Error A lbound ubound #> 1     ind60→x1      A    x1 ind60 -0.66602170 0.06402866                 #> 2     ind60→x2      A    x2 ind60 -1.45290743 0.12615568                 #> 3     ind60→x3      A    x3 ind60 -1.21127127 0.12698640                 #> 4     dem60→y1      A    y1 dem60  2.21018204 0.24807745                 #> 5           a1      A    y2 dem60  2.98303882 0.39468080        0        #> 6            b      A    y3 dem60  2.52119422 0.27197809                 #> 7           c1      A    y4 dem60  2.86625997 0.31515644                 #> 8     dem65→y5      A    y5 dem65  2.08191983 0.25257949                 #> 9           a2      A    y6 dem65  2.61417776 0.33069500          10.123 #> 10          c2      A    y8 dem65  2.72104681 0.30581996                 #> 11       x1↔x1      S    x1    x1  0.08176757 0.01979702    1e-06        #> 12       x2↔x2      S    x2    x2  0.11868526 0.07037988    1e-06        #> 13       x3↔x3      S    x3    x3  0.46717098 0.08933784    1e-06        #> 14       y1↔y1      S    y1    y1  1.92282885 0.40071175    1e-06        #> 15       y2↔y2      S    y2    y2  6.51160402 1.20295551    1e-06        #> 16       y3↔y3      S    y3    y3  5.31391669 0.95937886    1e-06        #> 17       y4↔y4      S    y4    y4  2.88901915 0.63410194    1e-06        #> 18       y5↔y5      S    y5    y5  2.38176210 0.45556179    1e-06        #> 19       y6↔y6      S    y6    y6  4.36051508 0.82329062    1e-06        #> 20       y7↔y7      S    y7    y7  3.58248792 0.68194958    1e-06        #> 21       y8↔y8      S    y8    y8  2.95767332 0.62795292    1e-06        #> 22 ind60↔dem60      S ind60 dem60 -0.43953627 0.10490347                 #> 23 ind60↔dem65      S ind60 dem65 -0.54935165 0.09041693                 #> 24 dem60↔dem65      S dem60 dem65  0.97753026 0.02697913                 #> 25      one→x1      M     1    x1  5.05438384 0.08369589                 #> 26      one→x2      M     1    x2  4.79219463 0.17242320                 #> 27      one→x3      M     1    x3  3.55768979 0.16060031                 #> 28      one→y1      M     1    y1  5.46466668 0.30128777                 #> 29      one→y2      M     1    y2  4.25644290 0.45329784                 #> 30      one→y3      M     1    y3  6.56311028 0.39447209                 #> 31      one→y4      M     1    y4  4.45253306 0.38479430                 #> 32      one→y5      M     1    y5  5.13625193 0.29925389                 #> 33      one→y6      M     1    y6  2.97807410 0.38634730                 #> 34      one→y7      M     1    y7  6.19626390 0.36404189                 #> 35      one→y8      M     1    y8  4.04338969 0.37170615                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             35                    790              3130.995 #>    Saturated:             77                    748                    NA #> Independence:             22                    803                    NA #> Number of observations/statistics: 75/825 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      1550.9954               3200.995                 3265.611 #> BIC:      -279.8202               3282.107                 3171.797 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-07-26 12:38:45  #> Wall clock time: 0.07293105 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"definition-variables","dir":"","previous_headings":"","what":"Definition Variables","title":"Parse lavaan-like syntax for OpenMx models","text":"Definition variables , instance, used latent growth curve models time intervals observations different subjects data set. example, variables t_1-t_5 indicate person-specific times observation: OpenMx, parameters can set values found columns data set data. prefix. used following fix loadings latent slope variable observations times recorded t_1-t_5:","code":"library(mxsem) set.seed(3489) dataset <- simulate_latent_growth_curve(N = 100) head(dataset) #>             y1       y2       y3        y4         y5 t_1       t_2      t_3 #> [1,] 1.2817946 5.159870 7.178191  8.950046 11.4822306   0 1.5792322 2.304777 #> [2,] 1.1796379 3.588279 5.927219  8.381157 10.4640667   0 1.6701976 3.530621 #> [3,] 0.2196010 0.763441 2.499564  3.672995  4.4505868   0 0.6452145 2.512730 #> [4,] 0.5688185 1.440709 1.523483  1.416965  1.9674847   0 1.7171826 3.245522 #> [5,] 3.4928919 2.620657 1.753159  1.080701 -0.4436508   0 1.4055839 2.024568 #> [6,] 0.3520293 5.126854 7.390669 10.721785 12.6363472   0 1.5249299 2.400432 #>           t_4      t_5 #> [1,] 3.120797 4.217403 #> [2,] 5.004695 6.408367 #> [3,] 3.761189 4.729461 #> [4,] 4.331997 6.145424 #> [5,] 3.570780 5.517224 #> [6,] 3.654230 4.222212 library(mxsem) model <- \"   # specify latent intercept      I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5   # specify latent slope      S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5        # specify means of latent intercept and slope      I ~ int*1      S ~ slp*1      # set intercepts of manifest variables to zero      y1 ~ 0*1; y2 ~ 0*1; y3 ~ 0*1; y4 ~ 0*1; y5 ~ 0*1;   \"  mxsem(model = model,       data = dataset) |>   mxTryHard() |>   summary() #> Summary of untitled6  #>   #> free parameters: #>     name matrix row col    Estimate   Std.Error A lbound ubound #> 1  y1↔y1      S  y1  y1  0.02578029 0.014488264       0!        #> 2  y2↔y2      S  y2  y2  0.04010524 0.008389750       0!        #> 3  y3↔y3      S  y3  y3  0.04008174 0.006984929       0!        #> 4  y4↔y4      S  y4  y4  0.01752572 0.006930941       0!        #> 5  y5↔y5      S  y5  y5  0.05936966 0.016067358    1e-06        #> 6    I↔I      S   I   I  1.02593601 0.148058876    1e-06        #> 7    I↔S      S   I   S -0.14724742 0.110045416                 #> 8    S↔S      S   S   S  1.13051032 0.160486387    1e-06        #> 9    int      M   1   I  0.93112322 0.102209199                 #> 10   slp      M   1   S  0.48442624 0.106475815                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             10                     10              841.2609 #>    Saturated:             20                      0                    NA #> Independence:             10                     10                    NA #> Number of observations/statistics: 100/20 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       821.2609               861.2609                 863.7328 #> BIC:       795.2092               887.3126                 855.7301 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-07-26 12:38:46  #> Wall clock time: 0.241333 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"transformations","dir":"","previous_headings":"","what":"Transformations","title":"Parse lavaan-like syntax for OpenMx models","text":"Sometimes, one may want express one parameter function parameters. instance, moderated non-linear factor analysis, model parameters often expressed terms covariate k. instance, effect ξ η expressed  = a0 + a1 × k.","code":"library(mxsem) set.seed(9820) dataset <- simulate_moderated_nonlinear_factor_analysis(N = 100) head(dataset) #>              x1         x2         x3          y1         y2            y3 k #> [1,] -1.2166034 -1.2374549 -1.3731943 -1.01018683 -0.8296293 -1.2300555484 0 #> [2,]  1.1911346  0.9971499  1.0226322  0.86048030  0.4509088  0.6052786392 1 #> [3,] -0.7777169 -0.4725291 -0.8507347 -1.09582848 -0.5035753 -0.8048378456 0 #> [4,]  1.0027847  1.2351709  0.6951317  0.94040287  0.6684979  0.6596891858 0 #> [5,]  0.4387896  0.3919877  0.3260557 -0.58188691 -0.3614349 -0.4901022121 0 #> [6,] -1.4951549 -0.8834637 -1.1715535  0.01173845 -0.4697865 -0.0006475256 0 model <- \"   # loadings      xi =~ x1 + x2 + x3      eta =~ y1 + y2 + y3   # regression      eta ~ a*xi      # we need two new parameters: a0 and a1. These are created as follows:      !a0      !a1   # Now, we redefine a to be a0 + k*a1, where k is found in the data      a := a0 + data.k*a1 \"  mxsem(model = model,       data = dataset) |>   mxTryHard() |>   summary() #> Summary of untitled20  #>   #> free parameters: #>       name         matrix row col    Estimate   Std.Error A lbound ubound #> 1    xi→x2              A  x2  xi  0.79157858 0.026246184                 #> 2    xi→x3              A  x3  xi  0.89166108 0.027991673                 #> 3   eta→y2              A  y2 eta  0.81610411 0.028977474                 #> 4   eta→y3              A  y3 eta  0.90741889 0.027924346                 #> 5    x1↔x1              S  x1  x1  0.04060244 0.011022344 !     0!        #> 6    x2↔x2              S  x2  x2  0.04519865 0.008621643 !     0!        #> 7    x3↔x3              S  x3  x3  0.04647166 0.010143724       0!        #> 8    y1↔y1              S  y1  y1  0.03388962 0.008495346 !     0!        #> 9    y2↔y2              S  y2  y2  0.04210945 0.007766691 !     0!        #> 10   y3↔y3              S  y3  y3  0.03107010 0.007268278       0!        #> 11   xi↔xi              S  xi  xi  1.07304552 0.157796861    1e-06        #> 12 eta↔eta              S eta eta  0.26127631 0.041232786    1e-06        #> 13  one→x1              M   1  x1 -0.14881030 0.105057193                 #> 14  one→x2              M   1  x2 -0.10969677 0.084338898                 #> 15  one→x3              M   1  x3 -0.15448454 0.094426293                 #> 16  one→y1              M   1  y1 -0.05304659 0.089761149                 #> 17  one→y2              M   1  y2 -0.13040871 0.074578868                 #> 18  one→y3              M   1  y3 -0.05666275 0.081647174                 #> 19      a0 new_parameters   1   1  0.78168092 0.069381896                 #> 20      a1 new_parameters   1   2 -0.19334145 0.107742907                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             20                      7              475.3822 #>    Saturated:             27                      0                    NA #> Independence:             12                     15                    NA #> Number of observations/statistics: 100/27 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       461.3822               515.3822                 526.0151 #> BIC:       443.1460               567.4856                 504.3206 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2023-07-26 12:38:46  #> Wall clock time: 0.03846908 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.8  #> Need help?  See help(mxSummary)"},{"path":"/index.html","id":"adapting-the-model","dir":"","previous_headings":"","what":"Adapting the Model","title":"Parse lavaan-like syntax for OpenMx models","text":"mxsem returns mxModel object can adapted users familiar OpenMx.","code":""},{"path":"/index.html","id":"trouble-shooting","dir":"","previous_headings":"","what":"Trouble shooting","title":"Parse lavaan-like syntax for OpenMx models","text":"Sometimes things may go wrong. One way figure mxsem messed look parameter table generated internally. parameter table returned default. See vignette(\"create_parameter_table\", package = \"mxsem\") details.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Parse lavaan-like syntax for OpenMx models","text":"Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02","code":""},{"path":"/reference/char_in_string.html","id":null,"dir":"Reference","previous_headings":"","what":"char_in_string — char_in_string","title":"char_in_string — char_in_string","text":"checks character contained string","code":""},{"path":"/reference/char_in_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"char_in_string — char_in_string","text":"","code":"char_in_string(c, str)"},{"path":"/reference/char_in_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"char_in_string — char_in_string","text":"c character str string","code":""},{"path":"/reference/char_in_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"char_in_string — char_in_string","text":"bool: true char string","code":""},{"path":"/reference/clean_syntax.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_syntax — clean_syntax","title":"clean_syntax — clean_syntax","text":"takes lavaan style syntax removes comments, white space, etc.","code":""},{"path":"/reference/clean_syntax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_syntax — clean_syntax","text":"","code":"clean_syntax(syntax)"},{"path":"/reference/clean_syntax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_syntax — clean_syntax","text":"syntax lavaan style syntax","code":""},{"path":"/reference/clean_syntax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_syntax — clean_syntax","text":"vector strings cleaned syntax","code":""},{"path":"/reference/mxsem.html","id":null,"dir":"Reference","previous_headings":"","what":"mxsem — mxsem","title":"mxsem — mxsem","text":"Create extended SEM OpenMx (Boker et al., 2011) using lavaan-style (Rosseel, 2012) syntax.","code":""},{"path":"/reference/mxsem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mxsem — mxsem","text":"","code":"mxsem(   model,   data,   scale_loadings = TRUE,   scale_latent_variances = FALSE,   add_intercepts = TRUE,   add_variances = TRUE,   add_exogenous_latent_covariances = TRUE,   add_exogenous_manifest_covariances = TRUE,   lbound_variances = TRUE,   directed = \"→\",   undirected = \"↔\" )"},{"path":"/reference/mxsem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mxsem — mxsem","text":"model model syntax similar lavaan's syntax data raw data used fit model. Alternatively, object created OpenMx::mxData (e.g., OpenMx::mxData(observed = cov(OpenMx::Bollen), means = colMeans(OpenMx::Bollen), numObs = nrow(OpenMx::Bollen), type = \"cov\")) can used. scale_loadings first loading latent variable used scaling? scale_latent_variances latent variances used scaling add_intercepts intercepts manifest variables added automatically? set false, intercepts must added manually. intercepts added, mxsem automatically use just observed covariances observed means. add_variances variances manifest latent variables added automatically? add_exogenous_latent_covariances covariances exogenous latent variables added automatically? add_exogenous_manifest_covariances covariances exogenous manifest variables added automatically? lbound_variances lower bound variances set 0.000001? directed symbol used indicate directed effects (regressions loadings) undirected symbol used indicate undirected effects (variances covariances)","code":""},{"path":"/reference/mxsem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mxsem — mxsem","text":"mxModel object can fitted mxRun mxTryHard","code":""},{"path":"/reference/mxsem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mxsem — mxsem","text":"Setting SEM can tedious. lavaan (Rosseel, 2012) package provides great syntax make process easier. objective mxsem provide similar syntax OpenMx. OpenMx flexible R package extended SEM. However, note mxsem covers small part OpenMx framework focusing \"standard\" SEM.","code":""},{"path":"/reference/mxsem.html","id":"defaults","dir":"Reference","previous_headings":"","what":"Defaults","title":"mxsem — mxsem","text":"default, mxsem scales latent variables setting loadings first item 1. can changed setting scale_loadings = FALSE function call. Setting scale_latent_variances = TRUE sets latent variances 1 scaling. mxsem add intercepts manifest variables well variances manifest latent variables. lower bound 1e-6 added variances. Finally, covariances exogenous variables added. options can changed calling mxsem.","code":""},{"path":"/reference/mxsem.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"mxsem — mxsem","text":"syntax , part, identical lavaan. following specifies loadings latent variable eta manifest variables y1-y4:   Regressions specified ~:   Add covariances ~~   Intercepts specified ~1","code":"eta =~ y1 + y2 + y3 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2 xi  =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 # predict eta with xi: eta ~  xi x1 ~~ x2  eta ~ 1"},{"path":"/reference/mxsem.html","id":"parameter-labels-and-constraints","dir":"Reference","previous_headings":"","what":"Parameter labels and constraints","title":"mxsem — mxsem","text":"Add labels parameters follows:   Fix parameters using numeric values instead labels:","code":"xi  =~ l1*x1 + l2*x2 + l3*x3 eta =~ l4*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi"},{"path":"/reference/mxsem.html","id":"bounds","dir":"Reference","previous_headings":"","what":"Bounds","title":"mxsem — mxsem","text":"Lower upper bounds allow constraints parameters. instance, lower bound can prevent negative variances.   Upper bounds specified v < 10. Note parameter label must always come first. following allowed: 0 < v 10 > v.","code":"xi  =~ 1*x1 + l2*x2 + l3*x3 eta =~ 1*y1 + l5*y2 + l6*y3 # predict eta with xi: eta ~  b*xi # residual variance for x1 x1 ~~ v*x1 # bound: v > 0"},{"path":"/reference/mxsem.html","id":"-non-linear-constraints","dir":"Reference","previous_headings":"","what":"(Non-)linear constraints","title":"mxsem — mxsem","text":"Assume latent construct eta observed twice, eta1 first observation eta2 second. want define loadings eta2 observations l_1 + delta_l1. delta_l1 zero, measurement invariance.","code":"eta1 =~ l1*y1 + l2*y2 + l3*y3 eta2 =~ l4*y4 + l5*y5 + l6*y6 # define new delta-parameter !delta_1; !delta_2; !delta_3 # redefine l4-l6 l4 := l1 + delta_1 l5 := l2 + delta_2 l6 := l3 + delta_3"},{"path":"/reference/mxsem.html","id":"definition-variables","dir":"Reference","previous_headings":"","what":"Definition variables","title":"mxsem — mxsem","text":"Definition variables allow person-specific parameter constraints. Use data.-prefix specify definition variables.","code":"I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5 S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5  I ~ int*1 S ~ slp*1"},{"path":"/reference/mxsem.html","id":"starting-values","dir":"Reference","previous_headings":"","what":"Starting Values","title":"mxsem — mxsem","text":"mxsem differs lavaan specification starting values. Instead providing starting values model syntax, set_starting_values function used.","code":""},{"path":"/reference/mxsem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mxsem — mxsem","text":"Boker, S. M., Neale, M., Maes, H., Wilde, M., Spiegel, M., Brick, T., Spies, J., Estabrook, R., Kenny, S., Bates, T., Mehta, P., & Fox, J. (2011). OpenMx: Open Source Extended Structural Equation Modeling Framework. Psychometrika, 76(2), 306–317. https://doi.org/10.1007/s11336-010-9200-6 Rosseel, Y. (2012). lavaan: R package structural equation modeling. Journal Statistical Software, 48(2), 1–36. https://doi.org/10.18637/jss.v048.i02","code":""},{"path":"/reference/mxsem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mxsem — mxsem","text":"","code":"# THE FOLLOWING EXAMPLE IS ADAPTED FROM LAVAAN library(mxsem)  model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  fit <- mxsem(model = model,             data  = OpenMx::Bollen) |>   mxTryHard() #> Running untitled1 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled1 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072257 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 226053.29)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 2.17951969227074,1.81811337416475,1.44904273139336,0.604498542591087,1.29147133371279,1.17388109824386,1.30214921997094,0.898492807496343,1.13247237855642,1.20957807556503,1.9145854932506,7.40452888380707,4.99236807197458,1.32053478362367,3.15117584465316,2.17541773355732,5.01524081214556,0.0813524655757941,0.120528661602078,0.466700487209191,0.590970445925804,2.30230244435029,0.731349927237133,3.52500939251805,0.353179264102542,1.4122493599707,3.32140112844865,0.448634288141197,3.7172194317825,0.164481303610331,5.46466714938336,4.25644262724552,6.56311026417018,4.45253310577974,2.97807430845775,5.05438391596612,4.79219469558881,3.55768985928227,5.13625261913068,6.19626397439056,4.04339020550124 omxGetParameters(fit) #>    ind60→x2    ind60→x3 ind60→dem60 ind60→dem65          a1           b  #>  2.17951969  1.81811337  1.44904273  0.60449854  1.29147133  1.17388110  #>          c1 dem60→dem65          a2          c2       y1↔y1       y2↔y2  #>  1.30214922  0.89849281  1.13247238  1.20957808  1.91458549  7.40452888  #>       y3↔y3       y2↔y4       y4↔y4       y2↔y6       y6↔y6       x1↔x1  #>  4.99236807  1.32053478  3.15117584  2.17541773  5.01524081  0.08135247  #>       x2↔x2       x3↔x3       y1↔y5       y5↔y5       y3↔y7       y7↔y7  #>  0.12052866  0.46670049  0.59097045  2.30230244  0.73134993  3.52500939  #>       y4↔y8       y6↔y8       y8↔y8 ind60↔ind60 dem60↔dem60 dem65↔dem65  #>  0.35317926  1.41224936  3.32140113  0.44863429  3.71721943  0.16448130  #>      one→y1      one→y2      one→y3      one→y4      one→y6      one→x1  #>  5.46466715  4.25644263  6.56311026  4.45253311  2.97807431  5.05438392  #>      one→x2      one→x3      one→y5      one→y7      one→y8  #>  4.79219470  3.55768986  5.13625262  6.19626397  4.04339021    model_transformations <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b1*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b2*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8  # create new parameters: !delta_a !delta_b  # use the model parameters and the new parameters for transformations: a2 := a1 + delta_a # let us also add an overly complicated equality constraint... delta_b := 0 b2 := b1 + delta_b '  fit <- mxsem(model = model_transformations,             data  = OpenMx::Bollen) |>   mxTryHard() #> Running untitled2 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled2 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072522 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 225901.62)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 2.17951886916325,1.81811255128727,1.44904359028723,0.604494533510494,1.29147352891098,1.17388279702233,1.30215059021946,0.898493711643631,1.20957864510551,1.91458631372647,7.40454531371758,4.99236756988715,1.32054348667983,3.15118207994384,2.17542299592351,5.01523724078967,0.0813525044160571,0.120528400812975,0.466700664409228,0.590971140591723,2.30230354872315,0.731337997131143,3.5249956552196,0.353178416630574,1.41223965202246,3.32139158643102,0.448634638932976,3.71722405882739,0.164479938739754,5.4646693299894,4.25644938474715,6.56311129818079,4.45253590109382,2.97807351655402,5.05438441025969,4.79219591341877,3.55769102527676,5.13625463235875,6.19626615317593,4.04338894235638,-0.159000127341994 omxGetParameters(fit) #>    ind60→x2    ind60→x3 ind60→dem60 ind60→dem65          a1          b1  #>   2.1795189   1.8181126   1.4490436   0.6044945   1.2914735   1.1738828  #>          c1 dem60→dem65          c2       y1↔y1       y2↔y2       y3↔y3  #>   1.3021506   0.8984937   1.2095786   1.9145863   7.4045453   4.9923676  #>       y2↔y4       y4↔y4       y2↔y6       y6↔y6       x1↔x1       x2↔x2  #>   1.3205435   3.1511821   2.1754230   5.0152372   0.0813525   0.1205284  #>       x3↔x3       y1↔y5       y5↔y5       y3↔y7       y7↔y7       y4↔y8  #>   0.4667007   0.5909711   2.3023035   0.7313380   3.5249957   0.3531784  #>       y6↔y8       y8↔y8 ind60↔ind60 dem60↔dem60 dem65↔dem65      one→y1  #>   1.4122397   3.3213916   0.4486346   3.7172241   0.1644799   5.4646693  #>      one→y2      one→y3      one→y4      one→y6      one→x1      one→x2  #>   4.2564494   6.5631113   4.4525359   2.9780735   5.0543844   4.7921959  #>      one→x3      one→y5      one→y7      one→y8     delta_a  #>   3.5576910   5.1362546   6.1962662   4.0433889  -0.1590001"},{"path":"/reference/parameter_table_rcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"parameter_table_rcpp — parameter_table_rcpp","title":"parameter_table_rcpp — parameter_table_rcpp","text":"creates parameter table lavaan like syntax","code":""},{"path":"/reference/parameter_table_rcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameter_table_rcpp — parameter_table_rcpp","text":"","code":"parameter_table_rcpp(   syntax,   add_intercept,   add_variance,   add_exogenous_latent_covariances,   add_exogenous_manifest_covariances,   scale_latent_variance,   scale_loading )"},{"path":"/reference/parameter_table_rcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameter_table_rcpp — parameter_table_rcpp","text":"syntax lavaan like syntax add_intercept intercepts manifest variables automatically added? add_variance variances variables automatically added? add_exogenous_latent_covariances covariances exogenous latent variables added automatically? add_exogenous_manifest_covariances covariances exogenous manifest variables added automatically? scale_latent_variance variances latent variables set 1? scale_loading first loading latent variable set 1?","code":""},{"path":"/reference/parameter_table_rcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parameter_table_rcpp — parameter_table_rcpp","text":"parameter table","code":""},{"path":"/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"parameters — parameters","title":"parameters — parameters","text":"Returns parameter estimates mxModel. Wrapper omxGetParameters","code":""},{"path":"/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameters — parameters","text":"","code":"parameters(mxMod)"},{"path":"/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameters — parameters","text":"mxMod mxModel object","code":""},{"path":"/reference/parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parameters — parameters","text":"vector parameter estimates","code":""},{"path":"/reference/set_starting_values.html","id":null,"dir":"Reference","previous_headings":"","what":"set_starting_values — set_starting_values","title":"set_starting_values — set_starting_values","text":"set starting values OpenMx model. just interface omxSetParameters.","code":""},{"path":"/reference/set_starting_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_starting_values — set_starting_values","text":"","code":"set_starting_values(mx_model, values)"},{"path":"/reference/set_starting_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set_starting_values — set_starting_values","text":"mx_model model class mxModel values vector labeled parameter values","code":""},{"path":"/reference/set_starting_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set_starting_values — set_starting_values","text":"mxModel changed parameter values","code":""},{"path":"/reference/set_starting_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set_starting_values — set_starting_values","text":"","code":"library(mxsem)  model <- '   # latent variable definitions      ind60 =~ x1 + x2 + x3      dem60 =~ y1 + a1*y2 + b*y3 + c1*y4      dem65 =~ y5 + a2*y6 + b*y7 + c2*y8    # regressions     dem60 ~ ind60     dem65 ~ ind60 + dem60    # residual correlations     y1 ~~ y5     y2 ~~ y4 + y6     y3 ~~ y7     y4 ~~ y8     y6 ~~ y8 '  fit <- mxsem(model = model,             data  = OpenMx::Bollen) |>   set_starting_values(values = c(\"a1\" = .4, \"c1\" = .6)) |>   mxTryHard() #> Running untitled15 with 41 parameters #>  #> Beginning initial fit attempt #> Running untitled15 with 41 parameters #>  #>  Lowest minimum so far:  3096.94452072237 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=3096.9445 (started at 202112.01)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 2.17951980353829,1.81811315793535,1.44904149277093,0.60449799598486,1.29147178642606,1.17388160554158,1.30214929275503,0.89849273174528,1.13247325785058,1.20957841704505,1.91458720930249,7.40452851493968,4.99236362854155,1.32053669575168,3.15117507746441,2.17541405092931,5.01523815656657,0.0813525083842392,0.120528380942516,0.466700559262968,0.590969889534445,2.30230167793048,0.731346057943588,3.52500751953233,0.353176652182399,1.4122503753988,3.32139967797945,0.448634203571203,3.71721478103848,0.164480129672026,5.46466665876995,4.25644296146657,6.56311029431611,4.45253279869124,2.97807411219302,5.05438368858271,4.79219435939959,3.55768954247493,5.1362518936912,6.1962639184946,4.04338944917516"},{"path":"/reference/simulate_latent_growth_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_latent_growth_curve — simulate_latent_growth_curve","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"simulate data latent growth curve model five measurement occasions. time-distance occasions differs subjects.","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"","code":"simulate_latent_growth_curve(N = 100)"},{"path":"/reference/simulate_latent_growth_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"N sample size","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"data set columns y1-y5 (observations) t_1-t_5 (time observation)","code":""},{"path":"/reference/simulate_latent_growth_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_latent_growth_curve — simulate_latent_growth_curve","text":"","code":"set.seed(123) dataset <- simulate_latent_growth_curve(N = 100)  model <- \"   I =~ 1*y1 + 1*y2 + 1*y3 + 1*y4 + 1*y5   S =~ data.t_1 * y1 + data.t_2 * y2 + data.t_3 * y3 + data.t_4 * y4 + data.t_5 * y5    I ~ int*1   S ~ slp*1    # set intercepts of manifest variables to zero   y1 ~ 0*1; y2 ~ 0*1; y3 ~ 0*1; y4 ~ 0*1; y5 ~ 0*1;   \"  mod <- mxsem(model = model,              data = dataset) |>   mxTryHard() #> Running untitled16 with 10 parameters #>  #> Beginning initial fit attempt #> Running untitled16 with 10 parameters #>  #>  Lowest minimum so far:  860.891632385379 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=860.89163 (started at 2725.1683)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 0.024864350463255,0.0537583562572848,0.0362117929092854,0.0523549170065912,0.0292053383259614,0.850255302012556,-0.0297817522862929,0.928423390356351,1.09511498601324,0.290548818410922"},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"simulate data moderated nonlinear factor analysis.","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"","code":"simulate_moderated_nonlinear_factor_analysis(N)"},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"N sample size","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"data set variables x1-x3 y1-y3 representing repeated measurements affect measure. assumed autoregressive effect different depending covariate k","code":""},{"path":"/reference/simulate_moderated_nonlinear_factor_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_moderated_nonlinear_factor_analysis — simulate_moderated_nonlinear_factor_analysis","text":"","code":"library(mxsem) set.seed(123) dataset <- simulate_moderated_nonlinear_factor_analysis(N = 2000)  model <- \" xi =~ x1 + x2 + x3 eta =~ y1 + y2 + y3 eta ~ a*xi  # we need two new parameters: a0 and a1. These are created as follows: !a0 !a1 # Now, we redefine a to be a0 + k*a1, where k is found in the data a := a0 + data.k*a1 \"  mod <- mxsem(model = model,              data = dataset) |>   mxTryHard() #> Running untitled17 with 20 parameters #>  #> Beginning initial fit attempt #> Running untitled17 with 20 parameters #>  #>  Lowest minimum so far:  9354.67567510078 #>  #> Solution found #>   #>  #>  Solution found!  Final fit=9354.6757 (started at 63250.836)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> 0.798644617309629,0.907904014705729,0.803837715881696,0.900395979441944,0.0423202234368666,0.0419256567003416,0.0370993791917775,0.0410547096152492,0.0419749845612823,0.037718785155605,0.983487398834448,0.248566014440495,0.0132169851867669,0.00300842698299125,0.0101772212526143,-0.00432275294115914,-0.000603560939517284,-0.00278041305765597,0.679955425224752,-0.172459855103843  omxGetParameters(mod) #>         xi→x2         xi→x3        eta→y2        eta→y3         x1↔x1  #>  0.7986446173  0.9079040147  0.8038377159  0.9003959794  0.0423202234  #>         x2↔x2         x3↔x3         y1↔y1         y2↔y2         y3↔y3  #>  0.0419256567  0.0370993792  0.0410547096  0.0419749846  0.0377187852  #>         xi↔xi       eta↔eta        one→x1        one→x2        one→x3  #>  0.9834873988  0.2485660144  0.0132169852  0.0030084270  0.0101772213  #>        one→y1        one→y2        one→y3            a0            a1  #> -0.0043227529 -0.0006035609 -0.0027804131  0.6799554252 -0.1724598551"},{"path":"/reference/split_string_all.html","id":null,"dir":"Reference","previous_headings":"","what":"split_string_all — split_string_all","title":"split_string_all — split_string_all","text":"splits string","code":""},{"path":"/reference/split_string_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split_string_all — split_string_all","text":"","code":"split_string_all(str, at)"},{"path":"/reference/split_string_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split_string_all — split_string_all","text":"str string splitted split string ","code":""},{"path":"/reference/split_string_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split_string_all — split_string_all","text":"vector strings","code":""}]
